{"paragraphs":[{"text":"%md\n### How to interact with Spark\n\nTo start a Spark job (either single JVM or distributed mode), we can simply execute `bin/spark-shell` cmd which will launch JVM which has the Spark Job running. The entry point of the Spark Job (JVM) is called SparkSession which allows user/application interact with the Spark Job. For instance, you can create RDDs through SparkSession from a exiting Scala collection (e.g. Array, List, Set) or from a data source (e.g. read text from HDFS to RDD)\n\n> Compare SparkContext and Spark Sessionhttps://databricks.com/blog/2016/08/15/how-to-use-sparksession-in-apache-spark-2-0.html https://spark.apache.org/docs/2.3.3/api/scala/index.html#org.apache.spark.sql.SparkSession https://spark.apache.org/docs/2.3.3/api/scala/index.html#org.apache.spark.SparkContext\n\nAlternatively, we can use Zeppelin to create a Spark Job and Zeppline will automatically create a SparkSession (`spark`) and a SparkContext (`sc`) for you.\n","user":"anonymous","dateUpdated":"2020-04-17T16:40:36+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":6,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>How to interact with Spark</h3>\n<p>To start a Spark job (either single JVM or distributed mode), we can simply execute <code>bin/spark-shell</code> cmd which will launch JVM which has the Spark Job running. The entry point of the Spark Job (JVM) is called SparkSession which allows user/application interact with the Spark Job. For instance, you can create RDDs through SparkSession from a exiting Scala collection (e.g. Array, List, Set) or from a data source (e.g. read text from HDFS to RDD)</p>\n<blockquote>\n  <p>Compare SparkContext and Spark <a href=\"Sessionhttps://databricks.com/blog/2016/08/15/how-to-use-sparksession-in-apache-spark-2-0.html\">Sessionhttps://databricks.com/blog/2016/08/15/how-to-use-sparksession-in-apache-spark-2-0.html</a> <a href=\"https://spark.apache.org/docs/2.3.3/api/scala/index.html#org.apache.spark.sql.SparkSession\">https://spark.apache.org/docs/2.3.3/api/scala/index.html#org.apache.spark.sql.SparkSession</a> <a href=\"https://spark.apache.org/docs/2.3.3/api/scala/index.html#org.apache.spark.SparkContext\">https://spark.apache.org/docs/2.3.3/api/scala/index.html#org.apache.spark.SparkContext</a></p>\n</blockquote>\n<p>Alternatively, we can use Zeppelin to create a Spark Job and Zeppline will automatically create a SparkSession (<code>spark</code>) and a SparkContext (<code>sc</code>) for you.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1586917552934_-1560827948","id":"20190921-014743_1530188134","dateCreated":"2020-04-15T02:25:52+0000","dateStarted":"2020-04-17T16:40:37+0000","dateFinished":"2020-04-17T16:40:39+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:15140"},{"text":"%spark\n\n//Spark session and sparkContext are loaded automatically\nprintln(\"Spark version: \" + spark.version.to)\nprintln(spark)\n\n//The following two lines point to the same SparkContext@13eda8a4 where @13eda8a4 is the memory address\nprintln(spark.sparkContext)\nprintln(sc)\n","user":"anonymous","dateUpdated":"2020-04-24T14:31:09+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":6,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Spark version: 2.3.4\norg.apache.spark.sql.SparkSession@7a4366b3\norg.apache.spark.SparkContext@4462b3cf\norg.apache.spark.SparkContext@4462b3cf\n"}]},"apps":[],"jobName":"paragraph_1586917552942_-1323390494","id":"20190921-013657_404311467","dateCreated":"2020-04-15T02:25:52+0000","dateStarted":"2020-04-24T14:31:09+0000","dateFinished":"2020-04-24T14:31:10+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:15141"},{"text":"%md\n# SparkContext and SparkSession\n- SparkContext - Prior to Spark 2.0.0 sparkContext was used as a channel to access all spark functionalities. The spark driver program uses spark context to connect to the cluster through a resource manager like YARN. sparkConf is required to create sparkContext object. This object stores the configuration parameters like appName, application, number of core and memory size of executor running on worker node. To use APIs of SQL, HIVE and Streaming, separate contexts needs to be created.\n- SparkSession - Spark 2.0.0 onwards, SparkSession provides a single point of entry to interact with underlying Spark functionality. It also allows programming Spark with DataFrames and Dataset APIs. All functionalities available with sparkContext are also available with sparkSession. There is no need to create a different sessions or contexts to use APIs of SQL, Hive and Streaming. All APIs are included in SparkSession. ","user":"anonymous","dateUpdated":"2020-04-17T16:40:41+0000","config":{"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"results":{},"enabled":true,"editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h1>SparkContext and SparkSession</h1>\n<ul>\n  <li>SparkContext - Prior to Spark 2.0.0 sparkContext was used as a channel to access all spark functionalities. The spark driver program uses spark context to connect to the cluster through a resource manager like YARN. sparkConf is required to create sparkContext object. This object stores the configuration parameters like appName, application, number of core and memory size of executor running on worker node. To use APIs of SQL, HIVE and Streaming, separate contexts needs to be created.</li>\n  <li>SparkSession - Spark 2.0.0 onwards, SparkSession provides a single point of entry to interact with underlying Spark functionality. It also allows programming Spark with DataFrames and Dataset APIs. All functionalities available with sparkContext are also available with sparkSession. There is no need to create a different sessions or contexts to use APIs of SQL, Hive and Streaming. All APIs are included in SparkSession.</li>\n</ul>\n</div>"}]},"apps":[],"jobName":"paragraph_1586917552944_-845999536","id":"20190922-220218_788870347","dateCreated":"2020-04-15T02:25:52+0000","dateStarted":"2020-04-17T16:40:41+0000","dateFinished":"2020-04-17T16:40:41+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:15142"},{"text":"%md\n### Creating RDDs from Scala collections\n\nWe can use `sc.parallelize` method to create RDDs from Scala collections\n(Note: `parallelize` is not available in the `SparkSession`. However, you can use `SparkSession.sparkContext.parallelize` instead)\n\nhttps://spark.apache.org/docs/2.3.3/api/scala/index.html#org.apache.spark.SparkContext","user":"anonymous","dateUpdated":"2020-04-17T16:40:42+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":6,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Creating RDDs from Scala collections</h3>\n<p>We can use <code>sc.parallelize</code> method to create RDDs from Scala collections<br/>(Note: <code>parallelize</code> is not available in the <code>SparkSession</code>. However, you can use <code>SparkSession.sparkContext.parallelize</code> instead)</p>\n<p><a href=\"https://spark.apache.org/docs/2.3.3/api/scala/index.html#org.apache.spark.SparkContext\">https://spark.apache.org/docs/2.3.3/api/scala/index.html#org.apache.spark.SparkContext</a></p>\n</div>"}]},"apps":[],"jobName":"paragraph_1586917552945_917733963","id":"20190921-022812_325072599","dateCreated":"2020-04-15T02:25:52+0000","dateStarted":"2020-04-17T16:40:42+0000","dateFinished":"2020-04-17T16:40:42+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:15143"},{"text":"%spark\n//Create RDDs from Scala collections\nval lsRdd = sc.parallelize(List(1,2,3,4,5))\n\n//number of items in lsRdd\nval count = lsRdd.count\n\n//first element in lsRdd\nval firstE = lsRdd.first\n\n//Number of partitions\nval partitionsNum = lsRdd.partitions.length\n\n//Manipulating lsRDD\nval dupRdd = lsRdd.flatMap(i => List.fill(i)(i))\nval dupArray = dupRdd.collect\nval evens = dupRdd.filter(_%2 == 0).collect","user":"anonymous","dateUpdated":"2020-04-24T14:31:26+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":6,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"lsRdd: org.apache.spark.rdd.RDD[Int] = ParallelCollectionRDD[0] at parallelize at <console>:26\ncount: Long = 5\nfirstE: Int = 1\npartitionsNum: Int = 2\ndupRdd: org.apache.spark.rdd.RDD[Int] = MapPartitionsRDD[1] at flatMap at <console>:38\ndupArray: Array[Int] = Array(1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5)\nevens: Array[Int] = Array(2, 2, 4, 4, 4, 4)\n"}]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://jarvis-bootcamp-m.us-east1-c.c.alpine-practice-259519.internal:4040/jobs/job?id=0","http://jarvis-bootcamp-m.us-east1-c.c.alpine-practice-259519.internal:4040/jobs/job?id=1","http://jarvis-bootcamp-m.us-east1-c.c.alpine-practice-259519.internal:4040/jobs/job?id=2","http://jarvis-bootcamp-m.us-east1-c.c.alpine-practice-259519.internal:4040/jobs/job?id=3"],"interpreterSettingId":"spark"}},"apps":[],"jobName":"paragraph_1586917552946_-929712913","id":"20190921-020350_225494359","dateCreated":"2020-04-15T02:25:52+0000","dateStarted":"2020-04-24T14:31:26+0000","dateFinished":"2020-04-24T14:31:29+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:15144"},{"text":"%md\n### Creating RDDs from Data source\n\n- `ssh` to dataproc master node\n- Download `online-retail-dataset.txt` dataset [link](https://github.com/databricks/Spark-The-Definitive-Guide/blob/master/data/retail-data/all/online-retail-dataset.csv)\n- Upload `online-retail-dataset.txt` to a HDFS location (e.g. hdfs dfs -put ...)\n- Inspect the dataset using spark RDD (see below Spark code)","user":"anonymous","dateUpdated":"2020-04-17T16:40:47+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":6,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Creating RDDs from Data source</h3>\n<ul>\n  <li><code>ssh</code> to dataproc master node</li>\n  <li>Download <code>online-retail-dataset.txt</code> dataset <a href=\"https://github.com/databricks/Spark-The-Definitive-Guide/blob/master/data/retail-data/all/online-retail-dataset.csv\">link</a></li>\n  <li>Upload <code>online-retail-dataset.txt</code> to a HDFS location (e.g. hdfs dfs -put &hellip;)</li>\n  <li>Inspect the dataset using spark RDD (see below Spark code)</li>\n</ul>\n</div>"}]},"apps":[],"jobName":"paragraph_1586917552950_1388602098","id":"20190920-182511_1653833929","dateCreated":"2020-04-15T02:25:52+0000","dateStarted":"2020-04-17T16:40:47+0000","dateFinished":"2020-04-17T16:40:47+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:15145"},{"text":"%md\n### Uploading data to HDFS\n- `ssh` to dataproc master node\n- Download data using the given link using the following command - `wget  https://raw.githubusercontent.com/databricks/Spark-The-Definitive-Guide/maste\nr/data/retail-data/all/online-retail-dataset.csv`\n- Upload it on hdfs using the following command - `hdfs dfs -put /home/aayushi9306/online-retail-dataset.csv hdfs:///user/aayushi/datasets/online_retail`\n\n","user":"anonymous","dateUpdated":"2020-04-17T16:40:47+0000","config":{"colWidth":6,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Uploading data to HDFS</h3>\n<ul>\n  <li><code>ssh</code> to dataproc master node</li>\n  <li>Download data using the given link using the following command - <code>wget  https://raw.githubusercontent.com/databricks/Spark-The-Definitive-Guide/maste\nr/data/retail-data/all/online-retail-dataset.csv</code></li>\n  <li>Upload it on hdfs using the following command - <code>hdfs dfs -put /home/aayushi9306/online-retail-dataset.csv hdfs:///user/aayushi/datasets/online_retail</code></li>\n</ul>\n</div>"}]},"apps":[],"jobName":"paragraph_1586964825236_1964271879","id":"20200415-153345_1083991999","dateCreated":"2020-04-15T15:33:45+0000","dateStarted":"2020-04-17T16:40:48+0000","dateFinished":"2020-04-17T16:40:48+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:15146"},{"text":"%spark\nval retailRDD = sc.textFile(\"hdfs:///user/aayushi/datasets/online_retail/online-retail-dataset.csv\")\n\n//understand what does each element look like in RDD\nval firstE = retailRDD.first()\n\n//count number of elements in the RDD\nretailRDD.count\n","user":"anonymous","dateUpdated":"2020-04-24T14:31:32+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":6,"editorMode":"ace/mode/scala","fontSize":9,"results":{"0":{"graph":{"mode":"table","height":244.4,"optionOpen":false}}},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"retailRDD: org.apache.spark.rdd.RDD[String] = hdfs:///user/aayushi/datasets/online_retail/online-retail-dataset.csv MapPartitionsRDD[4] at textFile at <console>:25\nfirstE: String = InvoiceNo,StockCode,Description,Quantity,InvoiceDate,UnitPrice,CustomerID,Country\nres3: Long = 541910\n"}]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://jarvis-bootcamp-m.us-east1-c.c.alpine-practice-259519.internal:4040/jobs/job?id=4","http://jarvis-bootcamp-m.us-east1-c.c.alpine-practice-259519.internal:4040/jobs/job?id=5"],"interpreterSettingId":"spark"}},"apps":[],"jobName":"paragraph_1586917552951_-1848895707","id":"20190920-182724_1961848616","dateCreated":"2020-04-15T02:25:52+0000","dateStarted":"2020-04-24T14:31:32+0000","dateFinished":"2020-04-24T14:31:37+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:15147"},{"text":"%spark\n//find out does withReplacement mean from the scal doc https://spark.apache.org/docs/2.3.3/api/scala/index.html#org.apache.spark.rdd.RDD\nretailRDD.takeSample(false, 10, 1).foreach(println)","user":"anonymous","dateUpdated":"2020-04-24T14:31:42+0000","config":{"colWidth":6,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"552290,21430,SET/3 RED GINGHAM ROSE STORAGE BOX,1,5/8/2011 13:32,3.75,16007,United Kingdom\n578349,22636,CHILDS BREAKFAST SET CIRCUS PARADE,2,11/24/2011 9:50,8.5,14539,United Kingdom\n537666,84917,WHITE HAND TOWEL WITH BUTTERFLY,1,12/7/2010 18:36,4.21,,United Kingdom\n547021,20749,ASSORTED COLOUR MINI CASES,2,3/18/2011 15:43,7.95,13046,United Kingdom\n553718,35809A,ENAMEL PINK TEA CONTAINER,1,5/18/2011 16:14,2.46,,United Kingdom\n557466,21242,RED RETROSPOT PLATE ,8,6/20/2011 13:08,1.69,13815,Germany\n567160,21218,RED SPOTTY BISCUIT TIN,1,9/18/2011 10:35,3.75,14562,United Kingdom\n548975,17003,BROCADE RING PURSE ,108,4/5/2011 11:47,0.29,17596,United Kingdom\n559338,85086A,CANDY SPOT HEART DECORATION,1,7/7/2011 16:30,0.83,,United Kingdom\n546769,22499,WOODEN UNION JACK BUNTING,3,3/16/2011 14:57,5.95,17504,United Kingdom\n"}]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://jarvis-bootcamp-m.us-east1-c.c.alpine-practice-259519.internal:4040/jobs/job?id=6","http://jarvis-bootcamp-m.us-east1-c.c.alpine-practice-259519.internal:4040/jobs/job?id=7"],"interpreterSettingId":"spark"}},"apps":[],"jobName":"paragraph_1586965219090_726174021","id":"20200415-154019_2088166788","dateCreated":"2020-04-15T15:40:19+0000","dateStarted":"2020-04-24T14:31:43+0000","dateFinished":"2020-04-24T14:31:45+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:15148"},{"text":"%md\n","user":"anonymous","dateUpdated":"2020-04-17T16:40:54+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1586917552952_-865020271","id":"20190922-220256_1973670371","dateCreated":"2020-04-15T02:25:52+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:15149"},{"text":"%md\n### CSV format issue\n- Discuss why there are some lines that have more than 8 columns (hint: csv format)\n- Reason: There are some lines that have more than 8 columns. This is because some values are seperated by comma. Generally in a CSV file, fields in each record are separated by comma. But here, fields like product description and country names contain non splitting commas.\n- Discuss some possible solutions\n- Solution: One alternative is to contruct a new mapping method for such cases. Another alternative is to pre process the raw data and make sure the fields contain some other delimiter like a tab instead of comma.","user":"anonymous","dateUpdated":"2020-04-17T16:40:55+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":6,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>CSV format issue</h3>\n<ul>\n  <li>Discuss why there are some lines that have more than 8 columns (hint: csv format)</li>\n  <li>Reason: There are some lines that have more than 8 columns. This is because some values are seperated by comma. Generally in a CSV file, fields in each record are separated by comma. But here, fields like product description and country names contain non splitting commas.</li>\n  <li>Discuss some possible solutions</li>\n  <li>Solution: One alternative is to contruct a new mapping method for such cases. Another alternative is to pre process the raw data and make sure the fields contain some other delimiter like a tab instead of comma.</li>\n</ul>\n</div>"}]},"apps":[],"jobName":"paragraph_1586917552954_980241007","id":"20190921-023538_989684097","dateCreated":"2020-04-15T02:25:52+0000","dateStarted":"2020-04-17T16:40:55+0000","dateFinished":"2020-04-17T16:40:55+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:15150"},{"text":"%spark\n//Check CSV format\nval splitRdd = retailRDD.map(s => s.split(\",\"))\n\n//Some lines have more than 8 column which indicates a format issue\nval samples = splitRdd.map(arr => arr.length).takeSample(false,15, 11)\n\n//find out how many lines have more than 8 cols\nval lenArrRdd = splitRdd.map(arr => (arr.length, arr))\nlenArrRdd.filter(_._1 != 8).take(3).foreach({case(count, cols) => println(count + \":\" + cols.mkString(\"||\"))})\n","user":"anonymous","dateUpdated":"2020-04-24T14:31:48+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":6,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"9:536381||82567||\"AIRLINE LOUNGE||METAL SIGN\"||2||12/1/2010 9:41||2.1||15311||United Kingdom\n9:536394||21506||\"FANCY FONT BIRTHDAY CARD|| \"||24||12/1/2010 10:39||0.42||13408||United Kingdom\n9:536520||22760||\"TRAY|| BREAKFAST IN BED\"||1||12/1/2010 12:43||12.75||14729||United Kingdom\nsplitRdd: org.apache.spark.rdd.RDD[Array[String]] = MapPartitionsRDD[6] at map at <console>:31\nsamples: Array[Int] = Array(8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8)\nlenArrRdd: org.apache.spark.rdd.RDD[(Int, Array[String])] = MapPartitionsRDD[9] at map at <console>:37\n"}]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://jarvis-bootcamp-m.us-east1-c.c.alpine-practice-259519.internal:4040/jobs/job?id=8","http://jarvis-bootcamp-m.us-east1-c.c.alpine-practice-259519.internal:4040/jobs/job?id=9","http://jarvis-bootcamp-m.us-east1-c.c.alpine-practice-259519.internal:4040/jobs/job?id=10"],"interpreterSettingId":"spark"}},"apps":[],"jobName":"paragraph_1586917552955_177834933","id":"20190921-023311_1509488233","dateCreated":"2020-04-15T02:25:52+0000","dateStarted":"2020-04-24T14:31:48+0000","dateFinished":"2020-04-24T14:31:50+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:15151"},{"text":"%md\n### Pre-process dataset\n\nWe need to deal with fields that contain commas. e.g. `123,\"seond, field\",\"third field\"`. We have seen this csv format issue in Hive, and we solved it using `OpenCSV` SerDe. In this practice, we will simply remove commas between double quotes and then remove all double quotes.\n\n- Removing commas in `Description` field (e.g. \"Apple, Inc\" => \"Apple Inc\")<br>`awk -F'\"' -v OFS='' '{ for (i=2; i<=NF; i+=2) gsub(\",\", \"\", $i) } 1' online-retail-dataset.txt`\n- Remove all double double quotes<br>`sed 's/\"//g' online-retail-dataset.txt`\n- output file: `online-retail-dataset_clean.txt`\n\n### Move file to HDFS\nMove `online-retail-dataset_clean.txt` to HDFS\n\n### Spark RDD Cache\n- https://spark.apache.org/docs/2.3.3/rdd-programming-guide.html#rdd-persistence\n- https://spark.apache.org/docs/2.3.3/api/scala/index.html#org.apache.spark.rdd.RDD@cache():RDD.this.type","user":"anonymous","dateUpdated":"2020-04-17T16:40:58+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Pre-process dataset</h3>\n<p>We need to deal with fields that contain commas. e.g. <code>123,&quot;seond, field&quot;,&quot;third field&quot;</code>. We have seen this csv format issue in Hive, and we solved it using <code>OpenCSV</code> SerDe. In this practice, we will simply remove commas between double quotes and then remove all double quotes.</p>\n<ul>\n  <li>Removing commas in <code>Description</code> field (e.g. &ldquo;Apple, Inc&rdquo; =&gt; &ldquo;Apple Inc&rdquo;)<br><code>awk -F&#39;&quot;&#39; -v OFS=&#39;&#39; &#39;{ for (i=2; i&lt;=NF; i+=2) gsub(&quot;,&quot;, &quot;&quot;, $i) } 1&#39; online-retail-dataset.txt</code></li>\n  <li>Remove all double double quotes<br><code>sed &#39;s/&quot;//g&#39; online-retail-dataset.txt</code></li>\n  <li>output file: <code>online-retail-dataset_clean.txt</code></li>\n</ul>\n<h3>Move file to HDFS</h3>\n<p>Move <code>online-retail-dataset_clean.txt</code> to HDFS</p>\n<h3>Spark RDD Cache</h3>\n<ul>\n  <li><a href=\"https://spark.apache.org/docs/2.3.3/rdd-programming-guide.html#rdd-persistence\">https://spark.apache.org/docs/2.3.3/rdd-programming-guide.html#rdd-persistence</a></li>\n  <li><a href=\"https://spark.apache.org/docs/2.3.3/api/scala/index.html#org.apache.spark.rdd.RDD@cache():RDD.this.type\">https://spark.apache.org/docs/2.3.3/api/scala/index.html#org.apache.spark.rdd.RDD@cache():RDD.this.type</a></li>\n</ul>\n</div>"}]},"apps":[],"jobName":"paragraph_1586917552958_768572569","id":"20190519-113048_765206384","dateCreated":"2020-04-15T02:25:52+0000","dateStarted":"2020-04-17T16:40:59+0000","dateFinished":"2020-04-17T16:40:59+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:15152"},{"text":"%md\n# Steps to pre process data\n- In master ssh, run the following command ->\n- Use following commands to preprocess data by removing non splitting commas from the fields and save the output to a new csv file called `online-retail-dataset_cleanNew.csv` - `hdfs dfs -cat /user/aayushi/datasets/online_retail/online-retail-dataset.csv | awk -F'\"' -v OFS='' '{ for (i=2; i<=NF; i+=2) gsub(\",\", \"\", $i) } 1' | sed 's/\"//g' > online-retail-dataset_cleanNew.csv`\n- Check if the new file is created in the existing directory - `ls`\n- Move this new csv file to hdfs - `hdfs dfs -put online-retail-dataset_cleanNew.csv /user/aayushi/datasets/online_retail/`\n- Check if new file is moved to hdfs - `hdfs dfs -ls /user/aayushi/datasets/online_retail`\n","user":"anonymous","dateUpdated":"2020-04-17T16:40:59+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h1>Steps to pre process data</h1>\n<ul>\n  <li>In master ssh, run the following command -&gt;</li>\n  <li>Use following commands to preprocess data by removing non splitting commas from the fields and save the output to a new csv file called <code>online-retail-dataset_cleanNew.csv</code> - <code>hdfs dfs -cat /user/aayushi/datasets/online_retail/online-retail-dataset.csv | awk -F&#39;&quot;&#39; -v OFS=&#39;&#39; &#39;{ for (i=2; i&lt;=NF; i+=2) gsub(&quot;,&quot;, &quot;&quot;, $i) } 1&#39; | sed &#39;s/&quot;//g&#39; &gt; online-retail-dataset_cleanNew.csv</code></li>\n  <li>Check if the new file is created in the existing directory - <code>ls</code></li>\n  <li>Move this new csv file to hdfs - <code>hdfs dfs -put online-retail-dataset_cleanNew.csv /user/aayushi/datasets/online_retail/</code></li>\n  <li>Check if new file is moved to hdfs - <code>hdfs dfs -ls /user/aayushi/datasets/online_retail</code></li>\n</ul>\n</div>"}]},"apps":[],"jobName":"paragraph_1586975569292_-240030847","id":"20200415-183249_242403390","dateCreated":"2020-04-15T18:32:49+0000","dateStarted":"2020-04-17T16:41:03+0000","dateFinished":"2020-04-17T16:41:03+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:15153"},{"text":"//Load csv file\n//Lazy evaluation\n//val datasetDir = \"/home/centos/dev/jrvs/bootcamp/hadoop/datasets\"\nval filePath = \"hdfs:///user/aayushi/datasets/online_retail/online-retail-dataset_cleanNew.csv\"\nval retailRDD = sc.textFile(filePath)\n\n//RDD action triggers evaluation (in this case count is an action)\nval count = retailRDD.count\n\n//tip: Use tab key to auto-complete\nval sample3 = retailRDD.takeSample(false, 3, 22)\n\n//Make sure every row has exactly 0 columns\nval longRow = retailRDD.filter(row => row.split(\",\").length != 8 ).count\n\n//Cache RDD since it will be accessed frequently\nretailRDD.cache","user":"anonymous","dateUpdated":"2020-04-24T14:31:58+0000","config":{"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"filePath: String = hdfs:///user/aayushi/datasets/online_retail/online-retail-dataset_cleanNew.csv\nretailRDD: org.apache.spark.rdd.RDD[String] = hdfs:///user/aayushi/datasets/online_retail/online-retail-dataset_cleanNew.csv MapPartitionsRDD[12] at textFile at <console>:31\ncount: Long = 541910\nsample3: Array[String] = Array(569457,22329,ROUND CONTAINER SET OF 5 RETROSPOT,1,10/4/2011 11:29,1.65,14606,United Kingdom, 571265,22530,MAGIC DRAWING SLATE DOLLY GIRL ,2,10/16/2011 11:31,0.42,16674,United Kingdom, 563893,90064B,BLACK VINTAGE  CRYSTAL EARRINGS,1,8/19/2011 17:10,3.75,16330,United Kingdom)\nlongRow: Long = 0\nres6: retailRDD.type = hdfs:///user/aayushi/datasets/online_retail/online-retail-dataset_cleanNew.csv MapPartitionsRDD[12] at textFile at <console>:31\n"}]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://jarvis-bootcamp-m.us-east1-c.c.alpine-practice-259519.internal:4040/jobs/job?id=11","http://jarvis-bootcamp-m.us-east1-c.c.alpine-practice-259519.internal:4040/jobs/job?id=12","http://jarvis-bootcamp-m.us-east1-c.c.alpine-practice-259519.internal:4040/jobs/job?id=13","http://jarvis-bootcamp-m.us-east1-c.c.alpine-practice-259519.internal:4040/jobs/job?id=14"],"interpreterSettingId":"spark"}},"apps":[],"jobName":"paragraph_1586917552959_70696455","id":"20190519-105016_1691323616","dateCreated":"2020-04-15T02:25:52+0000","dateStarted":"2020-04-24T14:31:58+0000","dateFinished":"2020-04-24T14:32:00+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:15154"},{"text":"//Making some utilities and make your life easier :)\nval printRddNSamples = (rdd: org.apache.spark.rdd.RDD[_], n: Int) => rdd.takeSample(false, n, 22).foreach(println)\nval printRdd3Samples = (rdd: org.apache.spark.rdd.RDD[_]) => printRddNSamples(rdd, 3)\nval printRddTopN = (rdd: org.apache.spark.rdd.RDD[_], n: Int) => rdd.take(n).foreach(println)\nval bars = \"---------\"\nval printMsg = (msg:String) => println(bars+msg+bars)\n","user":"anonymous","dateUpdated":"2020-04-24T14:32:05+0000","config":{"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"printRddNSamples: (org.apache.spark.rdd.RDD[_], Int) => Unit = <function2>\nprintRdd3Samples: org.apache.spark.rdd.RDD[_] => Unit = <function1>\nprintRddTopN: (org.apache.spark.rdd.RDD[_], Int) => Unit = <function2>\nbars: String = ---------\nprintMsg: String => Unit = <function1>\n"}]},"apps":[],"jobName":"paragraph_1586917552961_1925455721","id":"20190519-192640_1954412488","dateCreated":"2020-04-15T02:25:52+0000","dateStarted":"2020-04-24T14:32:05+0000","dateFinished":"2020-04-24T14:32:06+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:15155"},{"text":"%md\n### Spark RDD Transormations and Actions\n\n- <a href=http://spark.apache.org/docs/2.3.0/rdd-programming-guide.html#transformations target=\"_blank\">Transformations</a>\n- <a href=http://spark.apache.org/docs/2.3.0/rdd-programming-guide.html#actions target=\"_blank\">Actions</a>\n- Databrick RDD operations http://bit.ly/30ez9IG\n- Spark: The Definitive Guide Chapter 12 (required) & Chapter 13 (Optional)\n\n#### RDD Actions\n1. Get the first element from `retailRDD`\n2. Get the first 5 elements from `retailRDD` as an array.\n3. Get all elements from `retailRDD` as an array\n4. Get random 5 elements from `retailRDD` as an array\n5. Save all elements from `retailRDD` to local file `hdfs:///tmp/text.txt`\n\nSample outputs:\n```bash\n#1\n536365,85123A,WHITE HANGING HEART T-LIGHT HOLDER,6,12/1/2010 8:26,2.55,17850,United Kingdom\n#2\n536365,85123A,WHITE HANGING HEART T-LIGHT HOLDER,6,12/1/2010 8:26,2.55,17850,United Kingdom\n536365,71053,WHITE METAL LANTERN,6,12/1/2010 8:26,3.39,17850,United Kingdom\n536365,84406B,CREAM CUPID HEARTS COAT HANGER,8,12/1/2010 8:26,2.75,17850,United Kingdom\n536365,84029G,KNITTED UNION FLAG HOT WATER BOTTLE,6,12/1/2010 8:26,3.39,17850,United Kingdom\n536365,84029E,RED WOOLLY HOTTIE WHITE HEART.,6,12/1/2010 8:26,3.39,17850,United Kingdom\n#3\n541909\n#4\n575477,85099F,JUMBO BAG STRAWBERRY,2,11/9/2011 16:14,4.13,,United Kingdom\n574536,22988,SOLDIERS EGG CUP ,5,11/4/2011 14:35,1.25,15707,United Kingdom\n538104,22748,POPPYS PLAYHOUSE KITCHEN,2,12/9/2010 15:16,2.1,17950,United Kingdom\n555150,84991,60 TEATIME FAIRY CAKE CASES,24,5/31/2011 15:53,0.55,,United Kingdom\n550496,22497,SET OF 2 TINS VINTAGE BATHROOM ,1,4/18/2011 15:05,8.29,,United Kingdom\n#5\nedward@jarvis-hadoop-m:~/BigData$ hdfs dfs -ls /tmp\ndrwxr-xr-x   - zeppelin hadoop          0 2019-09-17 18:20 /tmp/test.txt\n\n```\n\n","user":"anonymous","dateUpdated":"2020-04-17T16:41:08+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":6,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Spark RDD Transormations and Actions</h3>\n<ul>\n  <li>\n  <a href=http://spark.apache.org/docs/2.3.0/rdd-programming-guide.html#transformations target=\"_blank\">Transformations</a></li>\n  <li>\n  <a href=http://spark.apache.org/docs/2.3.0/rdd-programming-guide.html#actions target=\"_blank\">Actions</a></li>\n  <li>Databrick RDD operations <a href=\"http://bit.ly/30ez9IG\">http://bit.ly/30ez9IG</a></li>\n  <li>Spark: The Definitive Guide Chapter 12 (required) &amp; Chapter 13 (Optional)</li>\n</ul>\n<h4>RDD Actions</h4>\n<ol>\n  <li>Get the first element from <code>retailRDD</code></li>\n  <li>Get the first 5 elements from <code>retailRDD</code> as an array.</li>\n  <li>Get all elements from <code>retailRDD</code> as an array</li>\n  <li>Get random 5 elements from <code>retailRDD</code> as an array</li>\n  <li>Save all elements from <code>retailRDD</code> to local file <code>hdfs:///tmp/text.txt</code></li>\n</ol>\n<p>Sample outputs:</p>\n<pre><code class=\"bash\">#1\n536365,85123A,WHITE HANGING HEART T-LIGHT HOLDER,6,12/1/2010 8:26,2.55,17850,United Kingdom\n#2\n536365,85123A,WHITE HANGING HEART T-LIGHT HOLDER,6,12/1/2010 8:26,2.55,17850,United Kingdom\n536365,71053,WHITE METAL LANTERN,6,12/1/2010 8:26,3.39,17850,United Kingdom\n536365,84406B,CREAM CUPID HEARTS COAT HANGER,8,12/1/2010 8:26,2.75,17850,United Kingdom\n536365,84029G,KNITTED UNION FLAG HOT WATER BOTTLE,6,12/1/2010 8:26,3.39,17850,United Kingdom\n536365,84029E,RED WOOLLY HOTTIE WHITE HEART.,6,12/1/2010 8:26,3.39,17850,United Kingdom\n#3\n541909\n#4\n575477,85099F,JUMBO BAG STRAWBERRY,2,11/9/2011 16:14,4.13,,United Kingdom\n574536,22988,SOLDIERS EGG CUP ,5,11/4/2011 14:35,1.25,15707,United Kingdom\n538104,22748,POPPYS PLAYHOUSE KITCHEN,2,12/9/2010 15:16,2.1,17950,United Kingdom\n555150,84991,60 TEATIME FAIRY CAKE CASES,24,5/31/2011 15:53,0.55,,United Kingdom\n550496,22497,SET OF 2 TINS VINTAGE BATHROOM ,1,4/18/2011 15:05,8.29,,United Kingdom\n#5\nedward@jarvis-hadoop-m:~/BigData$ hdfs dfs -ls /tmp\ndrwxr-xr-x   - zeppelin hadoop          0 2019-09-17 18:20 /tmp/test.txt\n\n</code></pre>\n</div>"}]},"apps":[],"jobName":"paragraph_1586917552966_621656048","id":"20190519-115905_2023471169","dateCreated":"2020-04-15T02:25:52+0000","dateStarted":"2020-04-17T16:41:08+0000","dateFinished":"2020-04-17T16:41:08+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:15156"},{"text":"\n//Removing header\nval header = retailRDD.first\nval data = retailRDD.filter(row => row != header)","user":"anonymous","dateUpdated":"2020-04-24T14:32:11+0000","config":{"colWidth":6,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"header: String = InvoiceNo,StockCode,Description,Quantity,InvoiceDate,UnitPrice,CustomerID,Country\ndata: org.apache.spark.rdd.RDD[String] = MapPartitionsRDD[15] at filter at <console>:30\n"}]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://jarvis-bootcamp-m.us-east1-c.c.alpine-practice-259519.internal:4040/jobs/job?id=15"],"interpreterSettingId":"spark"}},"apps":[],"jobName":"paragraph_1586977703617_1484425315","id":"20200415-190823_1278611702","dateCreated":"2020-04-15T19:08:23+0000","dateStarted":"2020-04-24T14:32:11+0000","dateFinished":"2020-04-24T14:32:12+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:15157"},{"text":"//1. First element from retailRDD\nprintln(\"RDD #1\")\ndata.take(1).foreach(println)\n\nprintln()\n\n//2. First 5 elements as an array\nprintln(\"RDD #2\")\ndata.take(5).foreach(println)\n\nprintln()\n\n//3. Count number of elements in retailRDD\nprintln(\"RDD #3\")\nprintln(data.count())\n\nprintln()\n\n//4. Fetch random 5 elements\nprintln(\"RDD #4\")\nretailRDD.takeSample(false, 5, 5).foreach(println)\n\nprintln()\n\n//5. Save file to local file - hdfs:///tmp/text.txt\nprintln(\"RDD #5\")\nretailRDD.saveAsTextFile(\"hdfs:///tmp/retailRDDOutput.txt\")\nprintln(\"File saved\")\n\n\n","user":"anonymous","dateUpdated":"2020-04-24T14:32:15+0000","config":{"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":6,"editorMode":"ace/mode/scala","fontSize":9,"editorHide":false,"results":{"0":{"graph":{"mode":"table","height":402.246,"optionOpen":false}}},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"RDD #1\n536365,85123A,WHITE HANGING HEART T-LIGHT HOLDER,6,12/1/2010 8:26,2.55,17850,United Kingdom\n\nRDD #2\n536365,85123A,WHITE HANGING HEART T-LIGHT HOLDER,6,12/1/2010 8:26,2.55,17850,United Kingdom\n536365,71053,WHITE METAL LANTERN,6,12/1/2010 8:26,3.39,17850,United Kingdom\n536365,84406B,CREAM CUPID HEARTS COAT HANGER,8,12/1/2010 8:26,2.75,17850,United Kingdom\n536365,84029G,KNITTED UNION FLAG HOT WATER BOTTLE,6,12/1/2010 8:26,3.39,17850,United Kingdom\n536365,84029E,RED WOOLLY HOTTIE WHITE HEART.,6,12/1/2010 8:26,3.39,17850,United Kingdom\n\nRDD #3\n541909\n\nRDD #4\n569218,35970,ZINC FOLKART SLEIGH BELLS,6,10/2/2011 12:47,1.69,15952,United Kingdom\n562213,22489,PACK OF 12 TRADITIONAL CRAYONS,6,8/3/2011 13:39,0.42,13975,United Kingdom\n567901,21211,SET OF 72 SKULL PAPER  DOILIES,1,9/22/2011 16:28,2.92,,United Kingdom\nC580971,22313,OFFICE MUG WARMER PINK,-250,12/6/2011 15:04,2.55,14298,United Kingdom\n578827,22993,SET OF 4 PANTRY JELLY MOULDS,1,11/25/2011 14:25,2.46,,United Kingdom\n\nRDD #5\nFile saved\n"}]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://jarvis-bootcamp-m.us-east1-c.c.alpine-practice-259519.internal:4040/jobs/job?id=16","http://jarvis-bootcamp-m.us-east1-c.c.alpine-practice-259519.internal:4040/jobs/job?id=17","http://jarvis-bootcamp-m.us-east1-c.c.alpine-practice-259519.internal:4040/jobs/job?id=18","http://jarvis-bootcamp-m.us-east1-c.c.alpine-practice-259519.internal:4040/jobs/job?id=19","http://jarvis-bootcamp-m.us-east1-c.c.alpine-practice-259519.internal:4040/jobs/job?id=20","http://jarvis-bootcamp-m.us-east1-c.c.alpine-practice-259519.internal:4040/jobs/job?id=21"],"interpreterSettingId":"spark"}},"apps":[],"jobName":"paragraph_1586917552968_-1864373040","id":"20190519-122034_629713430","dateCreated":"2020-04-15T02:25:52+0000","dateStarted":"2020-04-24T14:32:15+0000","dateFinished":"2020-04-24T14:32:18+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:15158"},{"text":"%md","user":"anonymous","dateUpdated":"2020-04-15T02:25:52+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1586917552969_-994786825","id":"20190922-215221_1578966852","dateCreated":"2020-04-15T02:25:52+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:15159"},{"text":"%md\n#### RDD Transformations\nRDD Transformations are lazy eval. You can trigger and verify you RDD with a action (e.g. `printRddNSamples` uses `takeSample` action) \n\n1. Get all sales from \"United Kingdom\" (hint: use filter)\n2. Compare `sample` and `takeSample`\n\nSampel outputs:\n```bash\n#1\n495478\n495478\n495478\n#2\nrdd.sample vs rdd.takeSample\n```","user":"anonymous","dateUpdated":"2020-04-15T19:53:05+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":6,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h4>RDD Transformations</h4>\n<p>RDD Transformations are lazy eval. You can trigger and verify you RDD with a action (e.g. <code>printRddNSamples</code> uses <code>takeSample</code> action) </p>\n<ol>\n  <li>Get all sales from &ldquo;United Kingdom&rdquo; (hint: use filter)</li>\n  <li>Compare <code>sample</code> and <code>takeSample</code></li>\n</ol>\n<p>Sampel outputs:</p>\n<pre><code class=\"bash\">#1\n495478\n495478\n495478\n#2\nrdd.sample vs rdd.takeSample\n</code></pre>\n</div>"}]},"apps":[],"jobName":"paragraph_1586917552970_-348195763","id":"20190917-181850_863623231","dateCreated":"2020-04-15T02:25:52+0000","dateStarted":"2020-04-15T19:53:05+0000","dateFinished":"2020-04-15T19:53:05+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:15160"},{"text":"//Get all sales from UK\n\nprintMsg(\"#1\")\nval ukSales = retailRDD.filter(row => row.split(\",\")(7) == \"United Kingdom\").count \nprintln(s\"Sales from UK: $ukSales\")\n\nprintln()\n\n//Compare sample and takeSample\nprintMsg(\"#2\")\nval sampleCount = retailRDD.sample(false,0.1, 10).count\nprintln(s\"Sample count: $sampleCount\")\nval takeSampleCount = retailRDD.takeSample(false, 10, 10).length\nprintln(s\"takeSample Count: $takeSampleCount\")","user":"anonymous","dateUpdated":"2020-04-24T14:32:24+0000","config":{"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":6,"editorMode":"ace/mode/scala","fontSize":9,"editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"---------#1---------\nSales from UK: 495478\n\n---------#2---------\nSample count: 54160\ntakeSample Count: 10\nukSales: Long = 495478\nsampleCount: Long = 54160\ntakeSampleCount: Int = 10\n"}]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://jarvis-bootcamp-m.us-east1-c.c.alpine-practice-259519.internal:4040/jobs/job?id=22","http://jarvis-bootcamp-m.us-east1-c.c.alpine-practice-259519.internal:4040/jobs/job?id=23","http://jarvis-bootcamp-m.us-east1-c.c.alpine-practice-259519.internal:4040/jobs/job?id=24","http://jarvis-bootcamp-m.us-east1-c.c.alpine-practice-259519.internal:4040/jobs/job?id=25"],"interpreterSettingId":"spark"}},"apps":[],"jobName":"paragraph_1586917552971_-997011423","id":"20190519-124053_1683164197","dateCreated":"2020-04-15T02:25:52+0000","dateStarted":"2020-04-24T14:32:25+0000","dateFinished":"2020-04-24T14:32:26+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:15161"},{"text":"%md\n### Comparision between sample and takeSample\n- sample() - It takes percentage as an input argument and fraction of dataset is given as output. sample() returns a dataset and so it uses count() to count number of rows.\n- takeSample() - It takes number of rows as an input and an array is given as output. takeSample() returns an array of data so it uses length() to count number of elements in the array. Number of elements shows number of rows.","user":"anonymous","dateUpdated":"2020-04-15T19:56:57+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Comparision between sample and takeSample</h3>\n<ul>\n  <li>sample() - It takes percentage as an input argument and fraction of dataset is given as output. sample() returns a dataset and so it uses count() to count number of rows.</li>\n  <li>takeSample() - It takes number of rows as an input and an array is given as output. takeSample() returns an array of data so it uses length() to count number of elements in the array. Number of elements shows number of rows.</li>\n</ul>\n</div>"}]},"apps":[],"jobName":"paragraph_1586980388445_1924409561","id":"20200415-195308_178725424","dateCreated":"2020-04-15T19:53:08+0000","dateStarted":"2020-04-15T19:56:57+0000","dateFinished":"2020-04-15T19:56:57+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:15162"},{"text":"%md\n### Pair RDD (KeyValue)\nSo far, each element in `retailRDD` is a String. However, many distributed computation paradigms require KV pairs (e.g. MapReduce). Let's construct Pair RDDs from `retailRDD` in order to perform more advanced computations.\n\n**RDD vs PairRDD**:\n\n- https://spark.apache.org/docs/2.3.3/api/scala/index.html#org.apache.spark.rdd.RDD\n- https://spark.apache.org/docs/2.3.3/api/scala/index.html#org.apache.spark.rdd.PairRDDFunctions","user":"anonymous","dateUpdated":"2020-04-17T16:41:38+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Pair RDD (KeyValue)</h3>\n<p>So far, each element in <code>retailRDD</code> is a String. However, many distributed computation paradigms require KV pairs (e.g. MapReduce). Let&rsquo;s construct Pair RDDs from <code>retailRDD</code> in order to perform more advanced computations.</p>\n<p><strong>RDD vs PairRDD</strong>:</p>\n<ul>\n  <li><a href=\"https://spark.apache.org/docs/2.3.3/api/scala/index.html#org.apache.spark.rdd.RDD\">https://spark.apache.org/docs/2.3.3/api/scala/index.html#org.apache.spark.rdd.RDD</a></li>\n  <li><a href=\"https://spark.apache.org/docs/2.3.3/api/scala/index.html#org.apache.spark.rdd.PairRDDFunctions\">https://spark.apache.org/docs/2.3.3/api/scala/index.html#org.apache.spark.rdd.PairRDDFunctions</a></li>\n</ul>\n</div>"}]},"apps":[],"jobName":"paragraph_1586917552973_1875133411","id":"20190519-125017_38292448","dateCreated":"2020-04-15T02:25:52+0000","dateStarted":"2020-04-17T16:41:38+0000","dateFinished":"2020-04-17T16:41:38+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:15163"},{"text":"%md\n\n#### Questions 1.0\n\nTrnasform each element in `retailRDD` to a key value pair (as a tuple) as following\n\n```\nkey = country\nvalue = amount (e.g. Quantity * UnitPrice)\n```\n\nhint: \n\n- use `rdd.map`\n- Use `row.split(\",\")` to tokenize the row\n- Cast quanitity to int while parsing the row\n- Cast price to double\n\n**Sample output**:\n\n```\n//resultRdd.takeSample(false, 3,3)\n//wehere (key=country, value=amount) for each tuple\nres405: Array[(String, Double)] = Array((Germany,15.0), (United Kingdom,8.26), (United Kingdom,4.13))\n```\n\n","user":"anonymous","dateUpdated":"2020-04-17T16:41:41+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":6,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h4>Questions 1.0</h4>\n<p>Trnasform each element in <code>retailRDD</code> to a key value pair (as a tuple) as following</p>\n<pre><code>key = country\nvalue = amount (e.g. Quantity * UnitPrice)\n</code></pre>\n<p>hint: </p>\n<ul>\n  <li>use <code>rdd.map</code></li>\n  <li>Use <code>row.split(&quot;,&quot;)</code> to tokenize the row</li>\n  <li>Cast quanitity to int while parsing the row</li>\n  <li>Cast price to double</li>\n</ul>\n<p><strong>Sample output</strong>:</p>\n<pre><code>//resultRdd.takeSample(false, 3,3)\n//wehere (key=country, value=amount) for each tuple\nres405: Array[(String, Double)] = Array((Germany,15.0), (United Kingdom,8.26), (United Kingdom,4.13))\n</code></pre>\n</div>"}]},"apps":[],"jobName":"paragraph_1586917552974_1239415061","id":"20190519-195132_1947538683","dateCreated":"2020-04-15T02:25:52+0000","dateStarted":"2020-04-17T16:41:41+0000","dateFinished":"2020-04-17T16:41:41+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:15164"},{"text":"//Qustion 1.0 soutuion\nprintln(\"Question 1.0 :\")\n\nval parseKeyValue = (row: String ) => {\n    val tokens = row.split(\",\")\n    val country= tokens.last\n    val quantity = tokens(3).toInt\n    val unitPrice = tokens(5).toDouble\n    val amount = quantity * unitPrice\n    (country, amount)\n}\n\n\n// data.filter(_.contains(\"uantit\")).collect\nval ctryRdd = data.map(parseKeyValue)\nctryRdd.takeSample(false, 3,3)","user":"anonymous","dateUpdated":"2020-04-17T16:41:45+0000","config":{"lineNumbers":true,"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":6,"editorMode":"ace/mode/scala","fontSize":9,"editorHide":false,"results":{"0":{"graph":{"mode":"table","height":822,"optionOpen":false}}},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Question 1.0 :\nparseKeyValue: String => (String, Double) = <function1>\nctryRdd: org.apache.spark.rdd.RDD[(String, Double)] = MapPartitionsRDD[18] at map at <console>:45\nres7: Array[(String, Double)] = Array((Germany,19.799999999999997), (United Kingdom,8.26), (United Kingdom,4.13))\n"}]},"apps":[],"jobName":"paragraph_1586917552976_-1734894495","id":"20190519-125921_348001552","dateCreated":"2020-04-15T02:25:52+0000","dateStarted":"2020-04-17T16:41:46+0000","dateFinished":"2020-04-17T16:41:48+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:15165"},{"user":"anonymous","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1587052086315_-106863630","id":"20200416-154806_414523227","dateCreated":"2020-04-16T15:48:06+0000","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:15166"},{"text":"%md\n\n#### Questions 1.1\n\nCalculate total sales amount for each country and sort in descending order\n\n```sql\nSELECT country, sum(Quantity * UnitPrice) as total_sales\nFROM retail\nGROUP BY country\nORDER BY total_sales\n```\n\n**Sample output**\n\n```bash\n//resultRdd.take(3)\n//key=country, value=total_sales\nres415: Array[(String, Double)] = Array((France,197403.90000000026), (Malta,2505.470000000001), (Greece,4710.5199999999995))\n```\n\nHints:\n\n- implement `group by` with `rdd.reduceByKey` [doc](http://bit.ly/30fJHHs)\n- implement `order by` with `rdd.sortBy`","user":"anonymous","dateUpdated":"2020-04-17T16:41:59+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":6,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h4>Questions 1.1</h4>\n<p>Calculate total sales amount for each country and sort in descending order</p>\n<pre><code class=\"sql\">SELECT country, sum(Quantity * UnitPrice) as total_sales\nFROM retail\nGROUP BY country\nORDER BY total_sales\n</code></pre>\n<p><strong>Sample output</strong></p>\n<pre><code class=\"bash\">//resultRdd.take(3)\n//key=country, value=total_sales\nres415: Array[(String, Double)] = Array((France,197403.90000000026), (Malta,2505.470000000001), (Greece,4710.5199999999995))\n</code></pre>\n<p>Hints:</p>\n<ul>\n  <li>implement <code>group by</code> with <code>rdd.reduceByKey</code> <a href=\"http://bit.ly/30fJHHs\">doc</a></li>\n  <li>implement <code>order by</code> with <code>rdd.sortBy</code></li>\n</ul>\n</div>"}]},"apps":[],"jobName":"paragraph_1586917552978_-452800763","id":"20190519-195238_1235609517","dateCreated":"2020-04-15T02:25:52+0000","dateStarted":"2020-04-17T16:41:59+0000","dateFinished":"2020-04-17T16:41:59+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:15167"},{"text":"%spark\nprintln(\"Question 1.1\")\nprintMsg(\"Country's total sales\")\nval countryTotalSales = ctryRdd.reduceByKey((x: Double, y: Double ) => x + y).sortBy(_._2, ascending = false)\ncountryTotalSales.take(10).foreach(println)","user":"anonymous","dateUpdated":"2020-04-17T16:42:02+0000","config":{"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":6,"editorMode":"ace/mode/scala","fontSize":9,"editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Question 1.1\n---------Country's total sales---------\n(United Kingdom,8187806.363998696)\n(Netherlands,284661.539999999)\n(EIRE,263276.81999999884)\n(Germany,221698.21000000017)\n(France,197403.90000000026)\n(Australia,137077.2699999999)\n(Switzerland,56385.35000000011)\n(Spain,54774.5800000002)\n(Belgium,40910.95999999998)\n(Sweden,36595.90999999999)\ncountryTotalSales: org.apache.spark.rdd.RDD[(String, Double)] = MapPartitionsRDD[25] at sortBy at <console>:39\n"}]},"apps":[],"jobName":"paragraph_1586917552979_1036783845","id":"20190519-195236_1582695577","dateCreated":"2020-04-15T02:25:52+0000","dateStarted":"2020-04-17T16:42:02+0000","dateFinished":"2020-04-17T16:42:05+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:15168"},{"user":"anonymous","dateUpdated":"2020-04-15T02:25:52+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1586917552980_340722274","id":"20190922-215553_1555963294","dateCreated":"2020-04-15T02:25:52+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:15169"},{"text":"%md\n\n#### Questions 2.0\n\nLet's assume CustomerID is auto-increment. For each country, find the earliest registered customer (e.g. smallest CustomerID)\n\n```sql\nSELECT min(CustomerID), Country\nFROM retail\nGROUP BY Country\n```\n\n**Sample output**\n\n```\n//resultRdd.collect\nArray[(String, Int)] = Array((Australia,12386), (Portugal,12356), (United Kingdom,12346), (Brazil,12769), (Canada,15388), (Japan,12753), (Cyprus,12359), (European Community,15108), (Finland,12348), (Iceland,12347), (Netherlands,12759), (Singapore,12744), (Sweden,12483), (RSA,12446), (Norway,12350), (Denmark,12367), (Poland,12576), (Israel,12512), (Saudi Arabia,12565), (Belgium,12361), (Lithuania,15332), (Greece,12478), (Italy,12349), (France,12413), (Switzerland,12357), (Spain,12354), (USA,12558), (Germany,12426), (United Arab Emirates,12739), (EIRE,14016), (Hong Kong,2147483647), (Bahrain,12353), (Malta,15480), (Unspecified,12363), (Channel Islands,14442), (Austria,12358), (Lebanon,12764), (Czech Republic,12781))\n```\n\n**hints:**\n\n- Generate a new KV pair RDD `(country, id)`\n- use `rdd.reduceByKey` find the smallest\n- ID must be a numric number\n","user":"anonymous","dateUpdated":"2020-04-17T16:42:09+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":6,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h4>Questions 2.0</h4>\n<p>Let&rsquo;s assume CustomerID is auto-increment. For each country, find the earliest registered customer (e.g. smallest CustomerID)</p>\n<pre><code class=\"sql\">SELECT min(CustomerID), Country\nFROM retail\nGROUP BY Country\n</code></pre>\n<p><strong>Sample output</strong></p>\n<pre><code>//resultRdd.collect\nArray[(String, Int)] = Array((Australia,12386), (Portugal,12356), (United Kingdom,12346), (Brazil,12769), (Canada,15388), (Japan,12753), (Cyprus,12359), (European Community,15108), (Finland,12348), (Iceland,12347), (Netherlands,12759), (Singapore,12744), (Sweden,12483), (RSA,12446), (Norway,12350), (Denmark,12367), (Poland,12576), (Israel,12512), (Saudi Arabia,12565), (Belgium,12361), (Lithuania,15332), (Greece,12478), (Italy,12349), (France,12413), (Switzerland,12357), (Spain,12354), (USA,12558), (Germany,12426), (United Arab Emirates,12739), (EIRE,14016), (Hong Kong,2147483647), (Bahrain,12353), (Malta,15480), (Unspecified,12363), (Channel Islands,14442), (Austria,12358), (Lebanon,12764), (Czech Republic,12781))\n</code></pre>\n<p><strong>hints:</strong></p>\n<ul>\n  <li>Generate a new KV pair RDD <code>(country, id)</code></li>\n  <li>use <code>rdd.reduceByKey</code> find the smallest</li>\n  <li>ID must be a numric number</li>\n</ul>\n</div>"}]},"apps":[],"jobName":"paragraph_1586917552981_-1569307604","id":"20190519-195157_1405617071","dateCreated":"2020-04-15T02:25:52+0000","dateStarted":"2020-04-17T16:42:09+0000","dateFinished":"2020-04-17T16:42:09+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:15170"},{"text":"%spark\nprintMsg(\"Question 2.0: Generating KV pair RDD\")\nval countryId = data.filter(x => x.split(\",\")(6)!=\"\").map(x => {\n    val tokens = x.split(\",\")\n    val country = tokens.last\n    val custId = tokens(6).toInt\n    (country, custId)\n})\n\nval earlyCustId = countryId.reduceByKey((a: Int, b: Int) => if(a>b) a else b)\nearlyCustId.collect.foreach(println)\n","user":"anonymous","dateUpdated":"2020-04-17T16:42:12+0000","config":{"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":6,"editorMode":"ace/mode/scala","fontSize":9,"editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"---------Question 2.0: Generating KV pair RDD---------\n(Australia,16321)\n(Portugal,12811)\n(United Kingdom,18287)\n(Brazil,12769)\n(Canada,17844)\n(Japan,12812)\n(Cyprus,13809)\n(European Community,15108)\n(Finland,12704)\n(Iceland,12347)\n(Netherlands,14646)\n(Singapore,12744)\n(Sweden,17404)\n(RSA,12446)\n(Norway,12752)\n(Denmark,13919)\n(Poland,12816)\n(Israel,12688)\n(Saudi Arabia,12565)\n(Belgium,12876)\n(Lithuania,15332)\n(Greece,17508)\n(Italy,14912)\n(France,14277)\n(Switzerland,13520)\n(Spain,17097)\n(USA,12733)\n(Germany,14335)\n(United Arab Emirates,17829)\n(EIRE,14911)\n(Bahrain,12355)\n(Malta,17828)\n(Unspecified,16320)\n(Channel Islands,14937)\n(Austria,12865)\n(Lebanon,12764)\n(Czech Republic,12781)\ncountryId: org.apache.spark.rdd.RDD[(String, Int)] = MapPartitionsRDD[27] at map at <console>:35\nearlyCustId: org.apache.spark.rdd.RDD[(String, Int)] = ShuffledRDD[28] at reduceByKey at <console>:42\n"}]},"apps":[],"jobName":"paragraph_1586917552984_1497367526","id":"20190519-144439_1578143376","dateCreated":"2020-04-15T02:25:52+0000","dateStarted":"2020-04-17T16:42:12+0000","dateFinished":"2020-04-17T16:42:14+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:15171"},{"user":"anonymous","dateUpdated":"2020-04-15T02:25:52+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1586917552985_1072623463","id":"20190922-215609_1113478409","dateCreated":"2020-04-15T02:25:52+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:15172"},{"text":"%md\n\n### Question 2.1\n\nIt's inconvenient to tokenize each row in every operation. Instead, we count convert `retailRDD[String]` to `itemsRdd:RDD[Item]` where `Item` is a case class as following:\n\n`case class Item(invoiceNo:String, stockCode:String, description:Option[String], quantity:Int, invoiceDate:String, unitPrice:Double, customerID:Option[Int], Country:String)`\n\nIn this way, you only parse each row only once here and you can reuse `itemsRdd` in the rest of the questions.\n\n**Sample outputs**\n```scala\n//itemsRdd.take(3)\nres445: Array[Item] = Array(Item(536365,85123A,Some(WHITE HANGING HEART T-LIGHT HOLDER),6,12/1/2010 8:26,2.55,Some(17850),United Kingdom), Item(536365,71053,Some(WHITE METAL LANTERN),6,12/1/2010 8:26,3.39,Some(17850),United Kingdom), Item(536365,84406B,Some(CREAM CUPID HEARTS COAT HANGER),8,12/1/2010 8:26,2.75,Some(17850),United Kingdom))\n```\n\n**Hints**:\n\n- write a function to convert a row to a Item, e.g. \n```\nval parseRow2Item: (String) => Item = (row: String) => {\n    //complete body\n}\n```\n- Covert all rows to items, e.g. `val itemsRdd =  retailRDD.map(parseRow2Item)`\n","user":"anonymous","dateUpdated":"2020-04-17T16:42:16+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":6,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Question 2.1</h3>\n<p>It&rsquo;s inconvenient to tokenize each row in every operation. Instead, we count convert <code>retailRDD[String]</code> to <code>itemsRdd:RDD[Item]</code> where <code>Item</code> is a case class as following:</p>\n<p><code>case class Item(invoiceNo:String, stockCode:String, description:Option[String], quantity:Int, invoiceDate:String, unitPrice:Double, customerID:Option[Int], Country:String)</code></p>\n<p>In this way, you only parse each row only once here and you can reuse <code>itemsRdd</code> in the rest of the questions.</p>\n<p><strong>Sample outputs</strong></p>\n<pre><code class=\"scala\">//itemsRdd.take(3)\nres445: Array[Item] = Array(Item(536365,85123A,Some(WHITE HANGING HEART T-LIGHT HOLDER),6,12/1/2010 8:26,2.55,Some(17850),United Kingdom), Item(536365,71053,Some(WHITE METAL LANTERN),6,12/1/2010 8:26,3.39,Some(17850),United Kingdom), Item(536365,84406B,Some(CREAM CUPID HEARTS COAT HANGER),8,12/1/2010 8:26,2.75,Some(17850),United Kingdom))\n</code></pre>\n<p><strong>Hints</strong>:</p>\n<ul>\n  <li>\n  <p>write a function to convert a row to a Item, e.g. </p>\n  <pre><code>val parseRow2Item: (String) =&gt; Item = (row: String) =&gt; {\n//complete body\n}\n</code></pre></li>\n  <li>Covert all rows to items, e.g. <code>val itemsRdd =  retailRDD.map(parseRow2Item)</code></li>\n</ul>\n</div>"}]},"apps":[],"jobName":"paragraph_1586917552986_-1564870032","id":"20190921-180308_1963749922","dateCreated":"2020-04-15T02:25:52+0000","dateStarted":"2020-04-17T16:42:16+0000","dateFinished":"2020-04-17T16:42:16+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:15173"},{"text":"%spark\nprintMsg(\"Question 2.1: Parsing RDD into items as defined in case class\")\ncase class Item(invoiceNo:String, stockCode:String, description:Option[String], quantity:Int, invoiceDate:String, unitPrice:Double, customerID:Option[Int], Country:String)\n\nval rowToItem: (String) => Item = (row: String) => {\n    val token = row.split(\",\")\n    val desc = if (token(2).equals(\"\")) None else Some(token(2))\n    val id = if(token(6)==\"\") None else Some(token(6).toInt)\n    val country = token.last\n    Item(token(0), token(1), desc, token(3).toInt, token(4), token(5).toDouble, id, country )\n}\n\nval rddItem = data.map(rowToItem)\nrddItem.take(5).foreach(println)","user":"anonymous","dateUpdated":"2020-04-17T16:59:20+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":6,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"---------Question 2.1: Parsing RDD into items as defined in case class---------\nItem(536365,85123A,Some(WHITE HANGING HEART T-LIGHT HOLDER),6,12/1/2010 8:26,2.55,Some(17850),United Kingdom)\nItem(536365,71053,Some(WHITE METAL LANTERN),6,12/1/2010 8:26,3.39,Some(17850),United Kingdom)\nItem(536365,84406B,Some(CREAM CUPID HEARTS COAT HANGER),8,12/1/2010 8:26,2.75,Some(17850),United Kingdom)\nItem(536365,84029G,Some(KNITTED UNION FLAG HOT WATER BOTTLE),6,12/1/2010 8:26,3.39,Some(17850),United Kingdom)\nItem(536365,84029E,Some(RED WOOLLY HOTTIE WHITE HEART.),6,12/1/2010 8:26,3.39,Some(17850),United Kingdom)\ndefined class Item\nrowToItem: String => Item = <function1>\nrddItem: org.apache.spark.rdd.RDD[Item] = MapPartitionsRDD[73] at map at <console>:38\n"}]},"apps":[],"jobName":"paragraph_1586917552988_2029377190","id":"20190921-180433_1776305327","dateCreated":"2020-04-15T02:25:52+0000","dateStarted":"2020-04-17T16:59:20+0000","dateFinished":"2020-04-17T16:59:21+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:15174"},{"text":"%md\n### Questions 2.2\n\nRe-implement questions 1.1 & 2.1 using itemsRdd (`RDD[Item]`)","user":"anonymous","dateUpdated":"2020-04-17T16:42:24+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":6,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Questions 2.2</h3>\n<p>Re-implement questions 1.1 &amp; 2.1 using itemsRdd (<code>RDD[Item]</code>)</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1586917552990_-606269035","id":"20190922-140917_1244358721","dateCreated":"2020-04-15T02:25:52+0000","dateStarted":"2020-04-17T16:42:24+0000","dateFinished":"2020-04-17T16:42:24+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:15175"},{"text":"%spark\nprintMsg(\"Question 2.2\")\nprintln()\nprintMsg(\"Re-implementing 1.1\")\nval countrySalesNew = rddItem.map(s => (s.Country, s.unitPrice * s.quantity)).reduceByKey(_+_).sortBy(_._2, ascending = false)\ncountrySalesNew.take(5).foreach(println)\n\nprintln()\n\nprintMsg(\"Re-implementing 2.1\")\nval rddItemNew = rddItem.filter(_.customerID != None).map(x => (x.Country, x.customerID.get)).reduceByKey((a,b) => if(a<b) a else b)\nrddItemNew.collect().foreach(println)","user":"anonymous","dateUpdated":"2020-04-17T16:42:49+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"---------Question 2.2---------\n\n---------Re-implementing 1.1---------\n(United Kingdom,8187806.363998696)\n(Netherlands,284661.539999999)\n(EIRE,263276.81999999884)\n(Germany,221698.21000000017)\n(France,197403.90000000026)\n\n---------Re-implementing 2.1---------\n(Australia,12386)\n(Portugal,12356)\n(United Kingdom,12346)\n(Brazil,12769)\n(Canada,15388)\n(Japan,12753)\n(Cyprus,12359)\n(European Community,15108)\n(Finland,12348)\n(Iceland,12347)\n(Netherlands,12759)\n(Singapore,12744)\n(Sweden,12483)\n(RSA,12446)\n(Norway,12350)\n(Denmark,12367)\n(Poland,12576)\n(Israel,12512)\n(Saudi Arabia,12565)\n(Belgium,12361)\n(Lithuania,15332)\n(Greece,12478)\n(Italy,12349)\n(France,12413)\n(Switzerland,12357)\n(Spain,12354)\n(USA,12558)\n(Germany,12426)\n(United Arab Emirates,12739)\n(EIRE,14016)\n(Bahrain,12353)\n(Malta,15480)\n(Unspecified,12363)\n(Channel Islands,14442)\n(Austria,12358)\n(Lebanon,12764)\n(Czech Republic,12781)\ncountrySalesNew: org.apache.spark.rdd.RDD[(String, Double)] = MapPartitionsRDD[36] at sortBy at <console>:42\nrddItemNew: org.apache.spark.rdd.RDD[(String, Int)] = ShuffledRDD[39] at reduceByKey at <console>:48\n"}]},"apps":[],"jobName":"paragraph_1586917552991_-1533620837","id":"20190922-141025_1178356031","dateCreated":"2020-04-15T02:25:52+0000","dateStarted":"2020-04-17T16:42:49+0000","dateFinished":"2020-04-17T16:42:52+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:15176"},{"text":"%spark\n","user":"anonymous","dateUpdated":"2020-04-15T02:25:52+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1586917552992_-280647496","id":"20190922-215642_1393968112","dateCreated":"2020-04-15T02:25:52+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:15177"},{"text":"%md\n#### Questions 3\n\nFind number of customers.\n\n```\nSELECT distinct(customerId)\nFROM retail\n```\n\n**Sample output**\n```scala\n//resultRdd.count\nres458: Long = 4373\n```","user":"anonymous","dateUpdated":"2020-04-17T16:42:58+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":6,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h4>Questions 3</h4>\n<p>Find number of customers.</p>\n<pre><code>SELECT distinct(customerId)\nFROM retail\n</code></pre>\n<p><strong>Sample output</strong></p>\n<pre><code class=\"scala\">//resultRdd.count\nres458: Long = 4373\n</code></pre>\n</div>"}]},"apps":[],"jobName":"paragraph_1586917552993_-242411066","id":"20190519-195407_556558321","dateCreated":"2020-04-15T02:25:52+0000","dateStarted":"2020-04-17T16:42:58+0000","dateFinished":"2020-04-17T16:42:58+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:15178"},{"text":"%spark\nprintMsg(\"Question 3: Number of customers\")\nrddItem.map(x => x.customerID).distinct().count\n\n","user":"anonymous","dateUpdated":"2020-04-17T16:59:55+0000","config":{"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":6,"editorMode":"ace/mode/scala","fontSize":9,"editorHide":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"---------Question 3: Number of customers---------\nres17: Long = 4373\n"}]},"apps":[],"jobName":"paragraph_1586917552995_125367664","id":"20190519-194831_1486531342","dateCreated":"2020-04-15T02:25:52+0000","dateStarted":"2020-04-17T16:59:55+0000","dateFinished":"2020-04-17T16:59:56+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:15179"},{"user":"anonymous","dateUpdated":"2020-04-15T02:25:52+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1586917552997_1488558416","id":"20190922-215651_1847295545","dateCreated":"2020-04-15T02:25:52+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:15180"},{"text":"%md\n#### Question 4\n\nFind out the number of invoices/purchases for each customer.\n> Note: a invoiceNo can appear in multiple rows (e.g. a invoice contains more than one item)\n\n```sql\nSELECT CustomerId, count(distinct(invoiceNo)) as purchases\nFROM retail\nGROUP by CustomerId\n```\n\n**Sample output**\n```scala\n//rdd.takeSample(false,3,3)\n//where (key=customerId, value=purchases) for each tuple\nres509: Array[(Any, Int)] = Array((16305,1), (16804,3), (16226,3))\n```\n","user":"anonymous","dateUpdated":"2020-04-17T16:43:05+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":6,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h4>Question 4</h4>\n<p>Find out the number of invoices/purchases for each customer.</p>\n<blockquote>\n  <p>Note: a invoiceNo can appear in multiple rows (e.g. a invoice contains more than one item)</p>\n</blockquote>\n<pre><code class=\"sql\">SELECT CustomerId, count(distinct(invoiceNo)) as purchases\nFROM retail\nGROUP by CustomerId\n</code></pre>\n<p><strong>Sample output</strong></p>\n<pre><code class=\"scala\">//rdd.takeSample(false,3,3)\n//where (key=customerId, value=purchases) for each tuple\nres509: Array[(Any, Int)] = Array((16305,1), (16804,3), (16226,3))\n</code></pre>\n</div>"}]},"apps":[],"jobName":"paragraph_1586917552998_-1538740681","id":"20190519-195310_661372203","dateCreated":"2020-04-15T02:25:52+0000","dateStarted":"2020-04-17T16:43:05+0000","dateFinished":"2020-04-17T16:43:05+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:15181"},{"text":"%spark\nprintMsg(\"Question 4: Number of total customers\")\nval totalCust =  rddItem.map(x => (x.customerID.getOrElse(0), x.invoiceNo)).distinct().count\nprintln(totalCust)\n\nprintMsg(\"Numebr of purchases for each custmer\")\nval custIdInvoice = rddItem.map(x => (x.customerID.getOrElse(0), x.invoiceNo)).distinct().groupBy(_._1).mapValues(_.size).collect().foreach(println)\n\n\n","user":"anonymous","dateUpdated":"2020-04-17T16:59:59+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":6,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"---------Question 4: Number of total customers---------\n25900\n---------Numebr of purchases for each custmer---------\n(17796,4)\n(15930,1)\n(13732,1)\n(17934,2)\n(17312,3)\n(16566,6)\n(15550,4)\n(17158,3)\n(17080,3)\n(13298,1)\n(14882,2)\n(14866,13)\n(12516,2)\n(13278,1)\n(15522,2)\n(15392,5)\n(13244,1)\n(14002,2)\n(15594,6)\n(17874,7)\n(14326,2)\n(14748,6)\n(12612,2)\n(15432,1)\n(16172,5)\n(15498,35)\n(13838,4)\n(12462,4)\n(17468,2)\n(17248,1)\n(15120,2)\n(13310,6)\n(12540,19)\n(15006,1)\n(14138,2)\n(16686,9)\n(17172,2)\n(16714,4)\n(12990,3)\n(14554,4)\n(16374,2)\n(18248,4)\n(17034,4)\n(16112,4)\n(16062,4)\n(13832,2)\n(17686,7)\n(16230,2)\n(17044,3)\n(14512,2)\n(16812,1)\n(16906,4)\n(16878,2)\n(12420,1)\n(17430,2)\n(15820,1)\n(15552,1)\n(15610,1)\n(15230,2)\n(17306,21)\n(16794,12)\n(16358,5)\n(13850,2)\n(12878,3)\n(14808,15)\n(16842,4)\n(14528,1)\n(16460,3)\n(17406,5)\n(12620,3)\n(12478,1)\n(16616,2)\n(14806,1)\n(13080,1)\n(17682,7)\n(13716,1)\n(14586,3)\n(14860,2)\n(14292,14)\n(17396,8)\n(14044,4)\n(12682,31)\n(13242,3)\n(12882,2)\n(14154,2)\n(15680,3)\n(12398,1)\n(16904,16)\n(13826,2)\n(15590,1)\n(17930,5)\n(15750,9)\n(15330,2)\n(15022,4)\n(13744,2)\n(17820,2)\n(15360,1)\n(12654,5)\n(17062,5)\n(16302,2)\n(15754,4)\n(14886,1)\n(16050,1)\n(16866,3)\n(12532,1)\n(17678,1)\n(13352,2)\n(15220,7)\n(17266,3)\n(14670,2)\n(17422,10)\n(16618,6)\n(14342,6)\n(13258,3)\n(13940,4)\n(17388,4)\n(12818,2)\n(13160,1)\n(16708,1)\n(17384,2)\n(13750,5)\n(16444,5)\n(12866,1)\n(17444,3)\n(13280,3)\n(13110,8)\n(17392,2)\n(14924,1)\n(14702,18)\n(14148,1)\n(16678,17)\n(14894,1)\n(13318,3)\n(16222,1)\n(17272,5)\n(18196,2)\n(13404,2)\n(13508,1)\n(13960,2)\n(17856,6)\n(16598,2)\n(17770,5)\n(17522,5)\n(16178,1)\n(17498,1)\n(12518,5)\n(18260,8)\n(16368,2)\n(15074,1)\n(12664,10)\n(12962,2)\n(12890,1)\n(16352,2)\n(14540,3)\n(16654,5)\n(16764,18)\n(18176,2)\n(15342,2)\n(16496,4)\n(16656,21)\n(12754,5)\n(17732,1)\n(12352,11)\n(15306,3)\n(15644,4)\n(15758,1)\n(12618,1)\n(12598,9)\n(14090,1)\n(16872,3)\n(13654,6)\n(13182,1)\n(16054,1)\n(17672,4)\n(15090,1)\n(14188,10)\n(16072,1)\n(13398,1)\n(15428,1)\n(18282,3)\n(12508,2)\n(17670,1)\n(14164,2)\n(16808,2)\n(14206,2)\n(17030,1)\n(15512,2)\n(13658,7)\n(13466,2)\n(12520,6)\n(13520,8)\n(16666,1)\n(16344,1)\n(14920,2)\n(14484,1)\n(14998,2)\n(15070,1)\n(16242,8)\n(17850,35)\n(12766,7)\n(14348,1)\n(13496,3)\n(12938,1)\n(17574,1)\n(14640,8)\n(16554,7)\n(17526,8)\n(13196,4)\n(13058,3)\n(17852,2)\n(14730,8)\n(12628,4)\n(16582,1)\n(13072,1)\n(14242,2)\n(13516,3)\n(13594,1)\n(13428,1)\n(13752,6)\n(18082,1)\n(13402,2)\n(17356,1)\n(16992,6)\n(17320,3)\n(15326,1)\n(14408,7)\n(16792,2)\n(13212,4)\n(17660,1)\n(14908,1)\n(13626,1)\n(18194,2)\n(13358,1)\n(16308,4)\n(14868,9)\n(15526,2)\n(15288,5)\n(16950,3)\n(15400,6)\n(12868,6)\n(16810,2)\n(16278,3)\n(14364,8)\n(16806,4)\n(18170,3)\n(15756,4)\n(17968,1)\n(17536,1)\n(14962,1)\n(14174,1)\n(17504,10)\n(17744,7)\n(16596,2)\n(14020,2)\n(15632,10)\n(16342,4)\n(15144,18)\n(13460,2)\n(15298,14)\n(17364,12)\n(15556,1)\n(13570,1)\n(13730,2)\n(13302,1)\n(18094,7)\n(16766,2)\n(15440,3)\n(16324,3)\n(16648,2)\n(15834,6)\n(17068,22)\n(16954,9)\n(15576,1)\n(14110,13)\n(17148,1)\n(15506,3)\n(13216,1)\n(15308,2)\n(18142,4)\n(17628,1)\n(14066,1)\n(18032,1)\n(13158,4)\n(15304,10)\n(12670,6)\n(14698,5)\n(17298,2)\n(12624,2)\n(14530,6)\n(13888,2)\n(14788,2)\n(18086,1)\n(15744,1)\n(13950,5)\n(12864,1)\n(15942,1)\n(13692,5)\n(16748,5)\n(15322,2)\n(12798,3)\n(14432,6)\n(13124,3)\n(12680,4)\n(16850,1)\n(15690,2)\n(15218,11)\n(17160,6)\n(17400,5)\n(13958,1)\n(12522,2)\n(15530,4)\n(15410,8)\n(13410,7)\n(13260,1)\n(15462,3)\n(13492,3)\n(16292,2)\n(18190,3)\n(12782,6)\n(14276,5)\n(13842,9)\n(17730,15)\n(16080,3)\n(15088,3)\n(16924,4)\n(16428,1)\n(14022,1)\n(14616,3)\n(14608,4)\n(13650,7)\n(17194,2)\n(16952,2)\n(14518,1)\n(15344,5)\n(15260,8)\n(16224,4)\n(16274,1)\n(16398,4)\n(16726,5)\n(12514,1)\n(17094,2)\n(14936,9)\n(18252,2)\n(13436,1)\n(14304,2)\n(16322,2)\n(12484,8)\n(14360,4)\n(13008,2)\n(14156,66)\n(15226,1)\n(18216,1)\n(14536,1)\n(13176,1)\n(12630,2)\n(15802,3)\n(14792,2)\n(14552,1)\n(17412,7)\n(17436,2)\n(16780,2)\n(16832,3)\n(16114,1)\n(14636,2)\n(17370,4)\n(15540,1)\n(18268,2)\n(18030,3)\n(17664,2)\n(17060,1)\n(17164,8)\n(16742,2)\n(16040,3)\n(13972,2)\n(17186,2)\n(17970,1)\n(18278,1)\n(16652,11)\n(13510,5)\n(18280,1)\n(16770,6)\n(16364,2)\n(16454,3)\n(14578,1)\n(16594,1)\n(13464,1)\n(17832,1)\n(17746,2)\n(14738,9)\n(15380,6)\n(18064,2)\n(15156,3)\n(13680,5)\n(13108,1)\n(13494,1)\n(15210,1)\n(15014,2)\n(14338,4)\n(17234,1)\n(14944,14)\n(16462,4)\n(15894,2)\n(13846,4)\n(12426,1)\n(14208,1)\n(16332,8)\n(14336,4)\n(17022,1)\n(12940,4)\n(15676,5)\n(14752,1)\n(13786,1)\n(16700,17)\n(13598,2)\n(12550,1)\n(13004,22)\n(12714,5)\n(12430,1)\n(12350,1)\n(13662,7)\n(14092,17)\n(18118,31)\n(17920,17)\n(15898,6)\n(15436,3)\n(15494,2)\n(14620,3)\n(12358,2)\n(16926,1)\n(15636,2)\n(15206,4)\n(17704,2)\n(14622,1)\n(13218,1)\n(15932,11)\n(15852,2)\n(18184,1)\n(14760,2)\n(14600,1)\n(17912,6)\n(16910,8)\n(16266,7)\n(15364,2)\n(14412,3)\n(15366,2)\n(13932,1)\n(17560,5)\n(18036,3)\n(13066,3)\n(12748,224)\n(14232,8)\n(17550,3)\n(15004,1)\n(12510,2)\n(16836,2)\n(14096,34)\n(16680,1)\n(15316,1)\n(17864,3)\n(17534,1)\n(17464,1)\n(14756,1)\n(13304,1)\n(15654,2)\n(14688,27)\n(13322,1)\n(17274,1)\n(16386,2)\n(13740,1)\n(12362,13)\n(13678,1)\n(15460,1)\n(12854,5)\n(12622,1)\n(17226,1)\n(14632,1)\n(18126,1)\n(15524,1)\n(13272,2)\n(14130,1)\n(17924,13)\n(18232,5)\n(14880,3)\n(17046,1)\n(17692,5)\n(13632,6)\n(16936,1)\n(12388,6)\n(13992,1)\n(13146,1)\n(16882,3)\n(13560,1)\n(17556,1)\n(12758,2)\n(15258,2)\n(13558,4)\n(16318,1)\n(14524,9)\n(17926,2)\n(14442,5)\n(15034,11)\n(12812,1)\n(12676,6)\n(14542,1)\n(15746,2)\n(12928,5)\n(16184,7)\n(12480,4)\n(16716,3)\n(16602,2)\n(12668,6)\n(17696,14)\n(17026,2)\n(14546,9)\n(13506,3)\n(15052,1)\n(18042,1)\n(13448,10)\n(17736,4)\n(15332,4)\n(14500,3)\n(17734,3)\n(13426,12)\n(15838,21)\n(13668,29)\n(18112,2)\n(15414,3)\n(13006,1)\n(15568,3)\n(17654,1)\n(18224,1)\n(14664,2)\n(16900,5)\n(13116,2)\n(14400,2)\n(17052,1)\n(15764,10)\n(17302,6)\n(15532,6)\n(16480,1)\n(14720,3)\n(12724,4)\n(15140,8)\n(17458,1)\n(16982,1)\n(16738,1)\n(13300,2)\n(14426,16)\n(15516,3)\n(16976,1)\n(16526,1)\n(12738,1)\n(12412,3)\n(12828,6)\n(13934,1)\n(15716,4)\n(16182,4)\n(17126,7)\n(13456,7)\n(12374,1)\n(15562,1)\n(16986,2)\n(14040,15)\n(12674,7)\n(16232,5)\n(18050,1)\n(13420,4)\n(13762,2)\n(13416,2)\n(17284,7)\n(16960,3)\n(15434,6)\n(16052,1)\n(15116,4)\n(18240,1)\n(15394,4)\n(13854,29)\n(13638,1)\n(16140,4)\n(12436,1)\n(14836,3)\n(12464,8)\n(15050,5)\n(14972,1)\n(16434,7)\n(13364,2)\n(12626,13)\n(17898,2)\n(14282,15)\n(16092,5)\n(15786,5)\n(13256,1)\n(17708,2)\n(14570,2)\n(12994,5)\n(15358,29)\n(16146,3)\n(16128,5)\n(12658,1)\n(16528,1)\n(15920,4)\n(12584,18)\n(12556,2)\n(15984,11)\n(16698,2)\n(14108,3)\n(15346,1)\n(16150,10)\n(17994,6)\n(13422,2)\n(14968,1)\n(16938,5)\n(18204,4)\n(14680,23)\n(16372,2)\n(17848,9)\n(13524,5)\n(14234,4)\n(16170,7)\n(18250,2)\n(15882,5)\n(15598,3)\n(17448,1)\n(12488,3)\n(16510,1)\n(17906,1)\n(13142,1)\n(13418,23)\n(16930,3)\n(17752,1)\n(17354,1)\n(14332,3)\n(17816,4)\n(14498,5)\n(13760,2)\n(14710,4)\n(16340,1)\n(13592,4)\n(12968,1)\n(15078,38)\n(16790,8)\n(15514,13)\n(15700,3)\n(12646,2)\n(17408,1)\n(16728,4)\n(17490,11)\n(14932,1)\n(13292,2)\n(16574,1)\n(13220,4)\n(14896,2)\n(14978,5)\n(15508,6)\n(12578,4)\n(13742,14)\n(16820,1)\n(13468,41)\n(14062,12)\n(18188,4)\n(17214,7)\n(17144,2)\n(15628,10)\n(14382,1)\n(12678,13)\n(16592,19)\n(15422,2)\n(12808,3)\n(14534,25)\n(13708,1)\n(12528,8)\n(15030,2)\n(15356,10)\n(17706,22)\n(12720,29)\n(15454,1)\n(13030,2)\n(15844,1)\n(14146,6)\n(16180,10)\n(17988,8)\n(16244,2)\n(15266,1)\n(15194,22)\n(16200,2)\n(13792,2)\n(13548,2)\n(15714,2)\n(15106,7)\n(16258,5)\n(18276,3)\n(14974,1)\n(15246,2)\n(17580,3)\n(15046,16)\n(18074,1)\n(12988,1)\n(13602,1)\n(12428,12)\n(17128,1)\n(16746,19)\n(15800,2)\n(14870,1)\n(15812,5)\n(16096,1)\n(13790,1)\n(16768,5)\n(15334,3)\n(14964,1)\n(17250,2)\n(18198,21)\n(16988,1)\n(16898,4)\n(13572,1)\n(15612,2)\n(13890,14)\n(13488,17)\n(16446,3)\n(16912,14)\n(16634,2)\n(13566,2)\n(13774,1)\n(13344,3)\n(17724,4)\n(16110,3)\n(13270,1)\n(15740,1)\n(18006,1)\n(17254,2)\n(16366,1)\n(14776,13)\n(17844,1)\n(15592,1)\n(14060,20)\n(15836,2)\n(13268,15)\n(17190,3)\n(16818,13)\n(12494,13)\n(18172,25)\n(16134,3)\n(13362,5)\n(17010,2)\n(18138,1)\n(14988,1)\n(17418,2)\n(16966,10)\n(18044,11)\n(13856,5)\n(15674,8)\n(17954,16)\n(17180,6)\n(15938,5)\n(13500,4)\n(14934,3)\n(14216,4)\n(13284,2)\n(13544,2)\n(18092,12)\n(12936,5)\n(17634,9)\n(14520,2)\n(15168,1)\n(18262,1)\n(17198,3)\n(12814,1)\n(16762,3)\n(15442,1)\n(13894,5)\n(12840,6)\n(16084,1)\n(12770,1)\n(17466,2)\n(15386,1)\n(15060,4)\n(15212,2)\n(12450,2)\n(16610,1)\n(15732,2)\n(15500,4)\n(13210,1)\n(17374,2)\n(14796,27)\n(16338,1)\n(13060,1)\n(13232,7)\n(16778,2)\n(17700,6)\n(12410,3)\n(16432,1)\n(14918,2)\n(15134,8)\n(14354,2)\n(16828,2)\n(12548,1)\n(14888,1)\n(14642,1)\n(12386,2)\n(14280,1)\n(17962,1)\n(16156,13)\n(14476,1)\n(12924,5)\n(17750,9)\n(14496,2)\n(14544,2)\n(14142,1)\n(14440,5)\n(14638,1)\n(13090,18)\n(14582,1)\n(13686,1)\n(14716,2)\n(12348,4)\n(17552,6)\n(13800,1)\n(12910,8)\n(15918,2)\n(17334,3)\n(14902,2)\n(14952,15)\n(12512,2)\n(16584,3)\n(17096,7)\n(13186,5)\n(13016,3)\n(16412,1)\n(14690,3)\n(17594,2)\n(15398,3)\n(14828,3)\n(13246,7)\n(15092,2)\n(16148,1)\n(18192,1)\n(15950,5)\n(15830,2)\n(14030,8)\n(16448,1)\n(14236,2)\n(15528,1)\n(18236,6)\n(14226,7)\n(15438,1)\n(15810,7)\n(16730,4)\n(15694,15)\n(17082,2)\n(12952,5)\n(13700,10)\n(15944,1)\n(14794,9)\n(16612,4)\n(18048,2)\n(16356,4)\n(16722,16)\n(14800,16)\n(15978,1)\n(13044,1)\n(16152,1)\n(17566,2)\n(14194,32)\n(16692,2)\n(17472,3)\n(13690,1)\n(12790,1)\n(14708,4)\n(17460,8)\n(15312,5)\n(16624,2)\n(13168,5)\n(13276,2)\n(18010,1)\n(13782,6)\n(15076,1)\n(13914,3)\n(12718,1)\n(14436,1)\n(14658,2)\n(13320,6)\n(15240,7)\n(16256,2)\n(17140,1)\n(12560,4)\n(16670,17)\n(17608,2)\n(15998,6)\n(16754,1)\n(17976,1)\n(14088,14)\n(17122,1)\n(16122,4)\n(13000,3)\n(16330,4)\n(17268,4)\n(12944,2)\n(14100,1)\n(12794,2)\n(13630,11)\n(17398,3)\n(17914,1)\n(17340,16)\n(17242,2)\n(18072,2)\n(15596,9)\n(14970,4)\n(12820,4)\n(13710,1)\n(13656,2)\n(13562,3)\n(14480,1)\n(18220,2)\n(15236,1)\n(14112,12)\n(12778,7)\n(16270,1)\n(17054,6)\n(14598,1)\n(16684,31)\n(12526,3)\n(16660,5)\n(17828,9)\n(12394,2)\n(13926,1)\n(17978,1)\n(14410,15)\n(14644,4)\n(15396,1)\n(14466,7)\n(16918,7)\n(12594,11)\n(14000,2)\n(14904,2)\n(12886,3)\n(16016,10)\n(13672,6)\n(17426,7)\n(16276,1)\n(14662,4)\n(13170,1)\n(17972,1)\n(14038,4)\n(13814,3)\n(16720,1)\n(17358,2)\n(14460,4)\n(14768,3)\n(16478,3)\n(18168,9)\n(12772,1)\n(15184,2)\n(14646,77)\n(13162,5)\n(14744,9)\n(16442,3)\n(17228,8)\n(13414,3)\n(14594,2)\n(15368,1)\n(13166,2)\n(14910,7)\n(16978,1)\n(15384,3)\n(16316,12)\n(15042,1)\n(15024,10)\n(12442,1)\n(14666,1)\n(17712,1)\n(15900,1)\n(15952,4)\n(16488,4)\n(17500,3)\n(13118,7)\n(17964,2)\n(15658,8)\n(18106,1)\n(14004,7)\n(15670,1)\n(18034,2)\n(15350,1)\n(14960,2)\n(16816,4)\n(16162,1)\n(12592,2)\n(16718,1)\n(12710,4)\n(18058,1)\n(12574,1)\n(17642,2)\n(18222,1)\n(14284,3)\n(15888,2)\n(16968,2)\n(15774,1)\n(14124,1)\n(15038,7)\n(12816,2)\n(13880,13)\n(13946,3)\n(13348,1)\n(16284,2)\n(17596,7)\n(14246,3)\n(18062,3)\n(14076,1)\n(15458,1)\n(14446,4)\n(17278,1)\n(13354,1)\n(15472,1)\n(16106,1)\n(12474,30)\n(15104,3)\n(15028,4)\n(15402,2)\n(17232,2)\n(17018,2)\n(13606,3)\n(15640,17)\n(17932,3)\n(12984,1)\n(16814,22)\n(15320,1)\n(16688,4)\n(15456,3)\n(14504,4)\n(17658,3)\n(16012,3)\n(16732,1)\n(15256,1)\n(18272,7)\n(16558,24)\n(15382,8)\n(13828,1)\n(13462,2)\n(14948,7)\n(17134,2)\n(14272,2)\n(15118,1)\n(16400,1)\n(16164,4)\n(12502,5)\n(13848,3)\n(12716,2)\n(16774,5)\n(15826,4)\n(14198,7)\n(15066,2)\n(13870,10)\n(16086,6)\n(14114,2)\n(12586,2)\n(12740,1)\n(13722,4)\n(15406,4)\n(16384,2)\n(13174,3)\n(16392,1)\n(12930,4)\n(13634,5)\n(16440,5)\n(17050,6)\n(13816,4)\n(13978,2)\n(13476,4)\n(14856,3)\n(15492,2)\n(14298,45)\n(17470,5)\n(13332,1)\n(14652,1)\n(15182,2)\n(12402,1)\n(16980,2)\n(18136,4)\n(16406,1)\n(15158,1)\n(17344,1)\n(14532,4)\n(17830,3)\n(15976,2)\n(14852,6)\n(16136,3)\n(15766,1)\n(13726,2)\n(12708,16)\n(17346,16)\n(14334,9)\n(15582,3)\n(12604,2)\n(14052,1)\n(16424,2)\n(13780,2)\n(12700,6)\n(17090,8)\n(16464,3)\n(13366,1)\n(15110,7)\n(17984,1)\n(14508,2)\n(17576,22)\n(15854,12)\n(14050,2)\n(12456,4)\n(13482,1)\n(15652,1)\n(17256,2)\n(14128,2)\n(16108,2)\n(16650,1)\n(14248,1)\n(12468,3)\n(14624,2)\n(14682,2)\n(16846,1)\n(13122,2)\n(12642,3)\n(17446,2)\n(15806,3)\n(18270,3)\n(15782,4)\n(17890,2)\n(17222,1)\n(17480,2)\n(13012,11)\n(14772,1)\n(13636,6)\n(15808,5)\n(15850,2)\n(14818,3)\n(14306,3)\n(12448,1)\n(16940,3)\n(12648,1)\n(16188,4)\n(15862,4)\n(12390,1)\n(16572,4)\n(14222,1)\n(16642,3)\n(15012,2)\n(17048,6)\n(15412,1)\n(17548,3)\n(15604,1)\n(17990,3)\n(12458,2)\n(14220,2)\n(16422,75)\n(15630,3)\n(13452,2)\n(18212,1)\n(13882,6)\n(17124,1)\n(16070,2)\n(13144,1)\n(12444,5)\n(13188,1)\n(14362,1)\n(15114,10)\n(18164,2)\n(14656,2)\n(12802,2)\n(17166,3)\n(13328,1)\n(13666,3)\n(16282,1)\n(13980,1)\n(15244,2)\n(13670,1)\n(12564,1)\n(12852,2)\n(15570,13)\n(12476,20)\n(15178,1)\n(13618,1)\n(18018,2)\n(16320,2)\n(16984,5)\n(14356,4)\n(14672,2)\n(16856,1)\n(16418,3)\n(16186,13)\n(17162,11)\n(13948,1)\n(16006,1)\n(13822,2)\n(17960,1)\n(13988,9)\n(16216,1)\n(15866,1)\n(18180,6)\n(17904,2)\n(12784,2)\n(16402,2)\n(13046,2)\n(17858,12)\n(14684,5)\n(17860,1)\n(12752,1)\n(12750,1)\n(12614,1)\n(13382,1)\n(13922,1)\n(17908,1)\n(12656,8)\n(14068,1)\n(15292,1)\n(14312,6)\n(18146,2)\n(15152,16)\n(14606,128)\n(13938,1)\n(16916,2)\n(14976,8)\n(15150,11)\n(13908,5)\n(13810,4)\n(14538,2)\n(12356,3)\n(17502,4)\n(16008,3)\n(14804,1)\n(17382,1)\n(16658,1)\n(15728,1)\n(17456,1)\n(16518,3)\n(14132,12)\n(15574,4)\n(17676,7)\n(14290,6)\n(16056,1)\n(15992,1)\n(17854,2)\n(13370,2)\n(13372,1)\n(15128,8)\n(15970,1)\n(17698,1)\n(13758,7)\n(12912,5)\n(12418,1)\n(16758,1)\n(15608,4)\n(15906,8)\n(13208,7)\n(15618,5)\n(12974,1)\n(13986,1)\n(17644,17)\n(15452,3)\n(15910,8)\n(12942,3)\n(17690,16)\n(17330,2)\n(17720,4)\n(13994,6)\n(14714,1)\n(14258,10)\n(15036,3)\n(17866,2)\n(13120,1)\n(14420,2)\n(13350,3)\n(16956,2)\n(14098,1)\n(13754,2)\n(16124,2)\n(14204,1)\n(14522,4)\n(14912,3)\n(15912,2)\n(18230,10)\n(14126,4)\n(16120,5)\n(14104,2)\n(17806,1)\n(15372,1)\n(18156,2)\n(15198,2)\n(14562,22)\n(16370,4)\n(14830,1)\n(16710,10)\n(16348,7)\n(12438,2)\n(14102,8)\n(17394,1)\n(13642,1)\n(17772,2)\n(15626,2)\n(18160,2)\n(14320,3)\n(16048,3)\n(12690,1)\n(12538,1)\n(16830,1)\n(12884,1)\n(12446,1)\n(13802,6)\n(16550,9)\n(18084,2)\n(15860,8)\n(14048,2)\n(15986,1)\n(18022,1)\n(17514,1)\n(13200,4)\n(16644,2)\n(13974,1)\n(17538,1)\n(12552,2)\n(14452,2)\n(14954,1)\n(17764,2)\n(16990,1)\n(16262,1)\n(16468,1)\n(16236,1)\n(12704,10)\n(13956,5)\n(17540,3)\n(14824,4)\n(17078,2)\n(12756,1)\n(13334,3)\n(15620,6)\n(16672,23)\n(15164,3)\n(14966,1)\n(18114,1)\n(12424,2)\n(14576,1)\n(16744,7)\n(12736,1)\n(14854,8)\n(14506,5)\n(17578,2)\n(14700,3)\n(16380,1)\n(16848,1)\n(12354,1)\n(13330,3)\n(16362,9)\n(17774,5)\n(12576,6)\n(15426,7)\n(14470,2)\n(15578,1)\n(13458,22)\n(15584,5)\n(12836,4)\n(14390,13)\n(16022,1)\n(15996,7)\n(15990,2)\n(13262,1)\n(14300,1)\n(14782,1)\n(17584,3)\n(13812,3)\n(17058,3)\n(15054,2)\n(0,3710)\n(18056,1)\n(12544,2)\n(13040,2)\n(12524,8)\n(17118,1)\n(12888,4)\n(13736,3)\n(15780,3)\n(15286,1)\n(17646,4)\n(14264,3)\n(15318,1)\n(17238,17)\n(16696,4)\n(16674,2)\n(16914,1)\n(17324,4)\n(13764,3)\n(14732,10)\n(14862,2)\n(15980,3)\n(17956,1)\n(17146,3)\n(17236,6)\n(17742,2)\n(15752,8)\n(13990,1)\n(12644,1)\n(15146,3)\n(14262,8)\n(14916,5)\n(15376,3)\n(15348,1)\n(17986,1)\n(12904,2)\n(17206,1)\n(12726,7)\n(18108,2)\n(14722,1)\n(14472,8)\n(15720,1)\n(17612,10)\n(14770,2)\n(16776,1)\n(13230,15)\n(12452,3)\n(13720,4)\n(14438,1)\n(18256,1)\n(17886,3)\n(15254,1)\n(17652,18)\n(13982,5)\n(13936,2)\n(13806,1)\n(15722,6)\n(14810,11)\n(15544,11)\n(12722,6)\n(13858,1)\n(12378,1)\n(17348,5)\n(13384,9)\n(15734,2)\n(17520,1)\n(14116,5)\n(14950,2)\n(14082,1)\n(12490,10)\n(18088,1)\n(15870,1)\n(14270,1)\n(15648,4)\n(17024,3)\n(12902,1)\n(17888,10)\n(16066,5)\n(15234,1)\n(12980,12)\n(12950,3)\n(15068,2)\n(17650,1)\n(15224,3)\n(13568,1)\n(14566,1)\n(12590,3)\n(14560,24)\n(16076,11)\n(15290,21)\n(13538,7)\n(12432,5)\n(18158,3)\n(15762,2)\n(15768,4)\n(17154,1)\n(12454,2)\n(17086,6)\n(13266,19)\n(16354,2)\n(14618,4)\n(13474,1)\n(14404,7)\n(18066,1)\n(16500,6)\n(17838,6)\n(12408,9)\n(16038,4)\n(17432,2)\n(16168,28)\n(16250,2)\n(17604,2)\n(13048,5)\n(17846,1)\n(15730,4)\n(16796,1)\n(13470,2)\n(13430,4)\n(13224,3)\n(16804,3)\n(14036,1)\n(15180,1)\n(16858,2)\n(17616,3)\n(17076,3)\n(16426,10)\n(15160,1)\n(14890,1)\n(14158,1)\n(15554,1)\n(13062,1)\n(12602,1)\n(12504,4)\n(14196,1)\n(15464,1)\n(12838,2)\n(15696,12)\n(13238,5)\n(13564,5)\n(14218,1)\n(14064,7)\n(16450,1)\n(13102,27)\n(17862,1)\n(13518,1)\n(16144,1)\n(13070,1)\n(13368,2)\n(13340,7)\n(15706,7)\n(18068,1)\n(17002,4)\n(15872,2)\n(14626,7)\n(12694,2)\n(13408,81)\n(14696,9)\n(12472,13)\n(14054,1)\n(16498,3)\n(14676,8)\n(13132,1)\n(13316,5)\n(17554,5)\n(16218,8)\n(12734,1)\n(16826,1)\n(13930,2)\n(16706,3)\n(14692,5)\n(18274,2)\n(15222,1)\n(16024,1)\n(13018,29)\n(17486,1)\n(13106,2)\n(18024,3)\n(17212,1)\n(14344,8)\n(13892,4)\n(15484,5)\n(13600,1)\n(12956,1)\n(14214,7)\n(17786,2)\n(13522,1)\n(16098,7)\n(15660,12)\n(12558,2)\n(13194,1)\n(15416,5)\n(12764,1)\n(13874,1)\n(15712,5)\n(16350,5)\n(15858,5)\n(17014,4)\n(14784,2)\n(13924,11)\n(12824,1)\n(17760,2)\n(13434,2)\n(16174,3)\n(12856,8)\n(16928,19)\n(18202,3)\n(16142,1)\n(14386,1)\n(17590,3)\n(14424,1)\n(15130,1)\n(13356,1)\n(14014,1)\n(14834,8)\n(17372,8)\n(16752,1)\n(18122,6)\n(15692,1)\n(14840,1)\n(17438,2)\n(17244,1)\n(17824,1)\n(13904,2)\n(15096,1)\n(13064,4)\n(12870,1)\n(17362,2)\n(17666,2)\n(12876,2)\n(14762,1)\n(14842,8)\n(12370,4)\n(15880,2)\n(15148,1)\n(13862,10)\n(13884,6)\n(12566,2)\n(12650,1)\n(16948,3)\n(17414,2)\n(16880,7)\n(15724,3)\n(14016,5)\n(12660,1)\n(14462,15)\n(12966,1)\n(18102,62)\n(14388,10)\n(16788,2)\n(14080,1)\n(17572,4)\n(14406,1)\n(12826,8)\n(13682,1)\n(15450,1)\n(13876,1)\n(17416,9)\n(16204,1)\n(13014,16)\n(15122,6)\n(12970,4)\n(17088,4)\n(13652,3)\n(14006,3)\n(14704,9)\n(13824,5)\n(14012,1)\n(15814,6)\n(17738,5)\n(12492,2)\n(14212,1)\n(16902,1)\n(12702,1)\n(14798,3)\n(17410,5)\n(12688,1)\n(15886,1)\n(16438,5)\n(14210,7)\n(18174,1)\n(15504,1)\n(15656,4)\n(16416,4)\n(15208,6)\n(12360,3)\n(16212,3)\n(15622,16)\n(12872,2)\n(17562,8)\n(14250,3)\n(14340,1)\n(15856,31)\n(16834,1)\n(15252,2)\n(16556,7)\n(13032,3)\n(16458,18)\n(13596,2)\n(15948,2)\n(17524,1)\n(17618,3)\n(18226,14)\n(17282,3)\n(15510,1)\n(14314,1)\n(16516,1)\n(16734,3)\n(13728,6)\n(12920,1)\n(13376,3)\n(13138,6)\n(15804,19)\n(17038,1)\n(14572,10)\n(14548,2)\n(18096,3)\n(12834,1)\n(17314,11)\n(16394,9)\n(13198,8)\n(13798,63)\n(13514,1)\n(13588,13)\n(13860,6)\n(15444,2)\n(17434,9)\n(15790,1)\n(15922,2)\n(13126,10)\n(17492,1)\n(15832,1)\n(18130,4)\n(16474,11)\n(17252,2)\n(14740,4)\n(14514,3)\n(16682,5)\n(16102,3)\n(15748,1)\n(14238,1)\n(18210,6)\n(12422,3)\n(16750,5)\n(14350,2)\n(13450,6)\n(17368,9)\n(14778,2)\n(15520,1)\n(13092,6)\n(15874,9)\n(14816,1)\n(17790,14)\n(16996,9)\n(12364,4)\n(14456,14)\n(14984,2)\n(13486,3)\n(17624,2)\n(16214,3)\n(13886,1)\n(17728,5)\n(15840,3)\n(13784,11)\n(15000,1)\n(15572,7)\n(15062,4)\n(13104,6)\n(13928,4)\n(14958,3)\n(15678,1)\n(15172,5)\n(17648,5)\n(13684,2)\n(13610,9)\n(13034,2)\n(13338,3)\n(13396,4)\n(14152,3)\n(16892,7)\n(13248,2)\n(14078,6)\n(13976,1)\n(15142,1)\n(15958,1)\n(12536,5)\n(15216,1)\n(17290,2)\n(12500,13)\n(16260,1)\n(17942,1)\n(16506,2)\n(14368,1)\n(17402,13)\n(14180,31)\n(12832,2)\n(16934,2)\n(17288,7)\n(15264,1)\n(14422,6)\n(12596,2)\n(17640,1)\n(17966,5)\n(16306,9)\n(16942,10)\n(12976,1)\n(17188,9)\n(15634,1)\n(18116,8)\n(16272,1)\n(16190,1)\n(16800,1)\n(12830,7)\n(13226,1)\n(15100,6)\n(14482,6)\n(12546,3)\n(13484,1)\n(15738,19)\n(17100,2)\n(12762,2)\n(16248,1)\n(13130,1)\n(12638,1)\n(17176,1)\n(15994,1)\n(15488,1)\n(13590,7)\n(14946,1)\n(16668,6)\n(15448,1)\n(16138,1)\n(13184,12)\n(16240,5)\n(13878,1)\n(13336,1)\n(17892,3)\n(15204,1)\n(15132,5)\n(17138,1)\n(17120,1)\n(13534,43)\n(13028,3)\n(14418,3)\n(13778,1)\n(14766,8)\n(14592,3)\n(16404,1)\n(15274,2)\n(17450,55)\n(17440,5)\n(13236,3)\n(12842,2)\n(17142,1)\n(17900,4)\n(17802,4)\n(13002,1)\n(12434,4)\n(15388,1)\n(13192,2)\n(18144,12)\n(16712,11)\n(14660,2)\n(14224,4)\n(17680,1)\n(17668,2)\n(16034,3)\n(12562,7)\n(17262,5)\n(16470,5)\n(18078,2)\n(12844,2)\n(17950,4)\n(13282,6)\n(13296,1)\n(13078,43)\n(15668,1)\n(13134,7)\n(16414,2)\n(13552,16)\n(17042,5)\n(16532,3)\n(15048,5)\n(14286,5)\n(14898,8)\n(14178,7)\n(17948,1)\n(16542,1)\n(16628,6)\n(17702,6)\n(16206,4)\n(12948,8)\n(14850,2)\n(16078,1)\n(17462,3)\n(13898,1)\n(16000,3)\n(17946,2)\n(17454,4)\n(14034,4)\n(16326,15)\n(16104,1)\n(16160,4)\n(16360,8)\n(16546,3)\n(12530,5)\n(14396,2)\n(13962,2)\n(17070,1)\n(15044,22)\n(13704,10)\n(16552,2)\n(16494,1)\n(16998,6)\n(12600,11)\n(14780,2)\n(13804,7)\n(13756,15)\n(14352,4)\n(17716,12)\n(17064,3)\n(12732,1)\n(15016,1)\n(15502,23)\n(18104,1)\n(14162,2)\n(17588,3)\n(16884,2)\n(16466,7)\n(16600,6)\n(16824,2)\n(14474,2)\n(13866,1)\n(17980,3)\n(13050,28)\n(18110,2)\n(13026,8)\n(15026,3)\n(13140,3)\n(15300,1)\n(13952,3)\n(17768,3)\n(12908,4)\n(13294,2)\n(12982,2)\n(12744,10)\n(15186,2)\n(17528,11)\n(13136,11)\n(18154,2)\n(17812,4)\n(17788,2)\n(14712,3)\n(16378,3)\n(16116,2)\n(15262,1)\n(18242,4)\n(16210,18)\n(17420,3)\n(18246,2)\n(18004,1)\n(14450,3)\n(17204,9)\n(13748,5)\n(14494,1)\n(17404,18)\n(13614,4)\n(18016,5)\n(14584,5)\n(17928,2)\n(13052,1)\n(14820,4)\n(16226,3)\n(16838,3)\n(15796,10)\n(15276,1)\n(14758,4)\n(12372,3)\n(13900,3)\n(15466,1)\n(16030,1)\n(16020,3)\n(12652,2)\n(14150,2)\n(17174,1)\n(15482,16)\n(15192,3)\n(16208,2)\n(16094,6)\n(13694,60)\n(12684,7)\n(13718,2)\n(17896,1)\n(17614,1)\n(15468,5)\n(17754,6)\n(13068,2)\n(17974,3)\n(15010,1)\n(13314,4)\n(17040,1)\n(13532,1)\n(17958,1)\n(12792,1)\n(17338,10)\n(12822,3)\n(17386,6)\n(13154,1)\n(15174,1)\n(16252,1)\n(15708,11)\n(13772,3)\n(12686,1)\n(17656,5)\n(16376,3)\n(13546,3)\n(13808,5)\n(12346,2)\n(14628,2)\n(13504,1)\n(15704,4)\n(15624,4)\n(17092,4)\n(14176,5)\n(16586,1)\n(16268,2)\n(15974,8)\n(13502,3)\n(15136,5)\n(14184,1)\n(16484,3)\n(16018,2)\n(15904,1)\n(18228,3)\n(15232,2)\n(17684,1)\n(17110,1)\n(15940,2)\n(17512,11)\n(15916,10)\n(14056,29)\n(12616,5)\n(18200,1)\n(17582,1)\n(15988,1)\n(12922,1)\n(14414,8)\n(17884,4)\n(13228,1)\n(16298,3)\n(12728,4)\n(14256,3)\n(15602,15)\n(17360,3)\n(12572,3)\n(15424,2)\n(15280,1)\n(17516,5)\n(14488,2)\n(16198,1)\n(18008,9)\n(12588,1)\n(12406,3)\n(16690,3)\n(17870,13)\n(12506,1)\n(17758,8)\n(13644,5)\n(14140,3)\n(13706,1)\n(13148,17)\n(16676,5)\n(14764,2)\n(18014,1)\n(17286,1)\n(16784,1)\n(14240,2)\n(16536,2)\n(16852,2)\n(17506,2)\n(14790,4)\n(17600,1)\n(14032,18)\n(16638,11)\n(14930,3)\n(14428,7)\n(15058,11)\n(15374,1)\n(16504,1)\n(15270,9)\n(12640,3)\n(15002,4)\n(13178,11)\n(12916,5)\n(13584,1)\n(15864,8)\n(16626,20)\n(13038,3)\n(16036,2)\n(17722,6)\n(13712,1)\n(14288,2)\n(17620,1)\n(16126,4)\n(14502,14)\n(17496,1)\n(17004,2)\n(13844,1)\n(13082,10)\n(15108,5)\n(17836,1)\n(17674,2)\n(15478,2)\n(17878,1)\n(16570,15)\n(15154,2)\n(13098,41)\n(12610,7)\n(13324,12)\n(17102,1)\n(14346,2)\n(16614,1)\n(18120,1)\n(14448,2)\n(17936,1)\n(16014,4)\n(14416,2)\n(13984,6)\n(15296,10)\n(17714,1)\n(12662,12)\n(15408,1)\n(16430,1)\n(17718,1)\n(17442,10)\n(14550,2)\n(16456,5)\n(18178,6)\n(13512,1)\n(17800,9)\n(16026,1)\n(16520,4)\n(15214,8)\n(16010,3)\n(15238,5)\n(13094,16)\n(13390,1)\n(14878,9)\n(17602,8)\n(17376,2)\n(15606,11)\n(17428,33)\n(15272,2)\n(15638,1)\n(15822,2)\n(17694,1)\n(16042,7)\n(16932,1)\n(14046,1)\n(16202,1)\n(17564,3)\n(18218,4)\n(13576,20)\n(18150,3)\n(16756,1)\n(17084,2)\n(15018,4)\n(18040,2)\n(16782,19)\n(13536,7)\n(12582,2)\n(13308,4)\n(14844,4)\n(17510,1)\n(17114,10)\n(13918,2)\n(17542,1)\n(12534,1)\n(15228,5)\n(15776,1)\n(14754,2)\n(13954,3)\n(15032,5)\n(13240,4)\n(18080,2)\n(17152,4)\n(17006,4)\n(17220,14)\n(12414,3)\n(15664,2)\n(15518,13)\n(12666,1)\n(17230,11)\n(14434,6)\n(12906,5)\n(12498,3)\n(13394,10)\n(17350,5)\n(15098,5)\n(14024,2)\n(17894,8)\n(16482,1)\n(13868,2)\n(13388,3)\n(12712,17)\n(17940,14)\n(12672,1)\n(17218,10)\n(15314,1)\n(17508,1)\n(15124,2)\n(16620,2)\n(16560,3)\n(17880,1)\n(17530,10)\n(12380,5)\n(15646,4)\n(15480,1)\n(15370,8)\n(12580,1)\n(12384,3)\n(17630,2)\n(17636,2)\n(17231,14)\n(14779,3)\n(13497,3)\n(16949,7)\n(17223,2)\n(12665,2)\n(15727,7)\n(13871,14)\n(14239,13)\n(14713,12)\n(17019,4)\n(16473,4)\n(18191,1)\n(16053,2)\n(16705,29)\n(12363,2)\n(16297,4)\n(15319,1)\n(15211,2)\n(16201,5)\n(12989,19)\n(14609,4)\n(14967,1)\n(15149,1)\n(13493,2)\n(13273,1)\n(14793,2)\n(13745,2)\n(14535,4)\n(12643,6)\n(13301,4)\n(12471,49)\n(17397,2)\n(17455,1)\n(13799,2)\n(16175,4)\n(17433,1)\n(12429,4)\n(15543,1)\n(14437,2)\n(13089,118)\n(12465,3)\n(13939,4)\n(15475,1)\n(16321,7)\n(15363,2)\n(18037,6)\n(15193,1)\n(15825,1)\n(14595,6)\n(14315,7)\n(17253,1)\n(12881,1)\n(16171,1)\n(17495,2)\n(18259,3)\n(15279,2)\n(13899,2)\n(14039,1)\n(14981,1)\n(17065,1)\n(12857,2)\n(12433,7)\n(16393,20)\n(15965,4)\n(15805,20)\n(14353,1)\n(13821,2)\n(12723,5)\n(15051,3)\n(17837,10)\n(17671,6)\n(12673,2)\n(17895,1)\n(17391,2)\n(16389,5)\n(13425,3)\n(17621,4)\n(12421,5)\n(17183,8)\n(14765,3)\n(12999,3)\n(17341,3)\n(16665,1)\n(13269,17)\n(17639,1)\n(14393,1)\n(17239,2)\n(12769,1)\n(12793,2)\n(16303,4)\n(14525,13)\n(13341,1)\n(14213,1)\n(16135,1)\n(12851,1)\n(16007,4)\n(17647,1)\n(16597,1)\n(15087,1)\n(17649,2)\n(16469,4)\n(13971,11)\n(12679,9)\n(17351,3)\n(18069,7)\n(14105,2)\n(16037,3)\n(16725,8)\n(12617,1)\n(16761,1)\n(14753,1)\n(15271,16)\n(13851,3)\n(17507,2)\n(12523,13)\n(18277,2)\n(17893,1)\n(15651,3)\n(15695,2)\n(12733,1)\n(14101,6)\n(15885,3)\n(13975,7)\n(15035,1)\n(15539,1)\n(12579,3)\n(15813,2)\n(12743,2)\n(13727,2)\n(13523,6)\n(13893,1)\n(14215,7)\n(16455,7)\n(15547,14)\n(16565,1)\n(13787,2)\n(15527,10)\n(13697,1)\n(17201,1)\n(13685,7)\n(14111,5)\n(14299,18)\n(14987,2)\n(13141,6)\n(15171,2)\n(15853,1)\n(14537,1)\n(15807,3)\n(17379,1)\n(15993,10)\n(15115,1)\n(16343,2)\n(14495,2)\n(13107,5)\n(14001,4)\n(13365,3)\n(16751,1)\n(15611,15)\n(13731,2)\n(15619,1)\n(14829,6)\n(12577,4)\n(14189,24)\n(14217,24)\n(13801,1)\n(17917,3)\n(13499,7)\n(17501,2)\n(14501,3)\n(17475,1)\n(17425,2)\n(15095,5)\n(14687,1)\n(12915,2)\n(15301,14)\n(17795,2)\n(17735,19)\n(13629,11)\n(13681,4)\n(13711,2)\n(13135,1)\n(14505,11)\n(16739,2)\n(14691,5)\n(14157,3)\n(16431,3)\n(16869,5)\n(14195,3)\n(16293,12)\n(14931,6)\n(15947,1)\n(17503,2)\n(13199,39)\n(17611,19)\n(12375,3)\n(13489,4)\n(15253,6)\n(13095,1)\n(15777,5)\n(12631,1)\n(16609,9)\n(16841,7)\n(15565,2)\n(17613,17)\n(14179,2)\n(16471,1)\n(17381,30)\n(12473,9)\n(14241,1)\n(14441,10)\n(15753,1)\n(15665,2)\n(17313,2)\n(12527,3)\n(14413,1)\n(14285,4)\n(14847,1)\n(16365,9)\n(12707,1)\n(15189,53)\n(15759,3)\n(16719,8)\n(12509,1)\n(15289,4)\n(18127,3)\n(15615,27)\n(17015,3)\n(16727,1)\n(17431,1)\n(17839,1)\n(14577,4)\n(17967,1)\n(15601,17)\n(12791,1)\n(16839,39)\n(17841,169)\n(16493,6)\n(18035,3)\n(16185,2)\n(15067,3)\n(16363,1)\n(12843,9)\n(17299,4)\n(16003,5)\n(17523,4)\n(15787,3)\n(14257,6)\n(17695,2)\n(14479,2)\n(13299,1)\n(17849,4)\n(15757,2)\n(17345,4)\n(14587,10)\n(18165,1)\n(13583,1)\n(16245,5)\n(17701,1)\n(15667,1)\n(16647,2)\n(13037,3)\n(15535,7)\n(16951,4)\n(15921,1)\n(15531,2)\n(18139,8)\n(16659,1)\n(15033,11)\n(13933,2)\n(12479,3)\n(17791,1)\n(15489,4)\n(15353,2)\n(12705,14)\n(17881,1)\n(18053,2)\n(16959,1)\n(12357,1)\n(16549,10)\n(13217,5)\n(14661,1)\n(16617,1)\n(17119,3)\n(12381,6)\n(13555,4)\n(16679,1)\n(14497,2)\n(15815,5)\n(13187,1)\n(14139,1)\n(17759,3)\n(14119,1)\n(15503,1)\n(15819,4)\n(17135,7)\n(16515,5)\n(14245,5)\n(13035,3)\n(15551,1)\n(12349,1)\n(13985,16)\n(12645,5)\n(15179,7)\n(18167,6)\n(15281,12)\n(14021,3)\n(18071,2)\n(15175,1)\n(14113,8)\n(17777,3)\n(15157,5)\n(13817,2)\n(13565,2)\n(14201,9)\n(12683,20)\n(13645,1)\n(15023,12)\n(15043,1)\n(14597,2)\n(13869,4)\n(17131,5)\n(14059,1)\n(17517,1)\n(15491,7)\n(14077,5)\n(12445,1)\n(17007,7)\n(12829,3)\n(17309,1)\n(16317,3)\n(14109,2)\n(12505,1)\n(18183,6)\n(17107,7)\n(17311,2)\n(17383,1)\n(14351,1)\n(12405,1)\n(16757,1)\n(15181,5)\n(15049,1)\n(18177,7)\n(14517,2)\n(15945,1)\n(14295,2)\n(13591,3)\n(13675,2)\n(15017,1)\n(13147,4)\n(13405,3)\n(13513,1)\n(14251,5)\n(15089,6)\n(12867,10)\n(17581,31)\n(13743,8)\n(16859,5)\n(15923,1)\n(14561,3)\n(14777,2)\n(16517,1)\n(13615,2)\n(16561,2)\n(15909,1)\n(16855,2)\n(13491,10)\n(17579,4)\n(12373,1)\n(12501,2)\n(17691,2)\n(12809,2)\n(15437,1)\n(13637,3)\n(13167,4)\n(17901,1)\n(16971,2)\n(16311,2)\n(16701,18)\n(14231,5)\n(18241,18)\n(13805,2)\n(17303,1)\n(14529,3)\n(16563,1)\n(14901,10)\n(16915,6)\n(12909,8)\n(12365,3)\n(17083,3)\n(15687,11)\n(16505,1)\n(13207,2)\n(13155,4)\n(16829,1)\n(15775,1)\n(17217,1)\n(15203,6)\n(17221,2)\n(17871,1)\n(17075,5)\n(14071,9)\n(15267,5)\n(17187,1)\n(15385,1)\n(16895,1)\n(17557,3)\n(16177,1)\n(12551,1)\n(13109,5)\n(13351,1)\n(12715,1)\n(13561,1)\n(12367,1)\n(16933,5)\n(13043,2)\n(17669,7)\n(14585,1)\n(16611,2)\n(16777,2)\n(17331,1)\n(13539,4)\n(17677,43)\n(16637,5)\n(13705,3)\n(17453,2)\n(16399,2)\n(15513,22)\n(15705,1)\n(15797,4)\n(15723,1)\n(14929,1)\n(13769,16)\n(16795,1)\n(17747,2)\n(15739,1)\n(15103,2)\n(18265,2)\n(17547,1)\n(15691,1)\n(13225,8)\n(17939,1)\n(18147,2)\n(17757,31)\n(14209,7)\n(14795,1)\n(14657,5)\n(17763,1)\n(16451,1)\n(14701,12)\n(15671,10)\n(13083,2)\n(13079,5)\n(15937,1)\n(14487,7)\n(18129,1)\n(15117,6)\n(12747,11)\n(17333,1)\n(17035,3)\n(16479,2)\n(17139,15)\n(15957,1)\n(17429,4)\n(15729,2)\n(14013,3)\n(18043,3)\n(15465,24)\n(18181,1)\n(15973,3)\n(14641,1)\n(12863,2)\n(18149,3)\n(16081,5)\n(17625,4)\n(18087,4)\n(12783,8)\n(17153,1)\n(13017,1)\n(12591,1)\n(13669,2)\n(18097,7)\n(14729,1)\n(14381,1)\n(13755,10)\n(17615,3)\n(14719,6)\n(15953,10)\n(16359,12)\n(13461,3)\n(15457,1)\n(13741,4)\n(13557,2)\n(18013,2)\n(13969,20)\n(15421,4)\n(12521,1)\n(17817,3)\n(13323,5)\n(12475,1)\n(18255,1)\n(13651,2)\n(12731,14)\n(16183,1)\n(16105,1)\n(16253,3)\n(13917,2)\n(14557,2)\n(12897,2)\n(16361,4)\n(15369,1)\n(13777,41)\n(12413,5)\n(12775,6)\n(13249,3)\n(12691,6)\n(18135,5)\n(17051,1)\n(18045,1)\n(14651,2)\n(15287,3)\n(13703,1)\n(17419,14)\n(18287,3)\n(13417,2)\n(15661,2)\n(15981,8)\n(15053,3)\n(15395,1)\n(14533,9)\n(17243,30)\n(13183,9)\n(13699,1)\n(17061,12)\n(12565,2)\n(17555,2)\n(13023,2)\n(13739,1)\n(13259,1)\n(18159,1)\n(16653,3)\n(16107,7)\n(16149,2)\n(16055,1)\n(16099,3)\n(13883,9)\n(15245,3)\n(14961,12)\n(15463,1)\n(12953,1)\n(15147,2)\n(17237,2)\n(17561,1)\n(13471,4)\n(14947,2)\n(16319,1)\n(17293,9)\n(14859,5)\n(17667,5)\n(18203,1)\n(13951,3)\n(15237,4)\n(14339,4)\n(17115,5)\n(13941,7)\n(17835,3)\n(13815,5)\n(14865,2)\n(15201,11)\n(18011,1)\n(17985,1)\n(13657,2)\n(14889,1)\n(13021,12)\n(17783,2)\n(17173,9)\n(13271,2)\n(16125,1)\n(14697,2)\n(12437,19)\n(16071,1)\n(12401,1)\n(16887,1)\n(14129,5)\n(15563,7)\n(13973,1)\n(17073,4)\n(12503,1)\n(15545,2)\n(13845,1)\n(15361,1)\n(17749,2)\n(13881,22)\n(17619,1)\n(17731,5)\n(14659,12)\n(17483,3)\n(17991,2)\n(16789,1)\n(16671,3)\n(15005,35)\n(16809,6)\n(15019,1)\n(17053,2)\n(12607,2)\n(14385,3)\n(18217,2)\n(15655,2)\n(14911,248)\n(15857,1)\n(13157,5)\n(14447,5)\n(15081,6)\n(13233,2)\n(17961,39)\n(16073,2)\n(17011,1)\n(13239,1)\n(14235,6)\n(15031,4)\n(17081,2)\n(13767,52)\n(12639,1)\n(14301,2)\n(17449,8)\n(15821,2)\n(16011,16)\n(14957,1)\n(13065,1)\n(12721,7)\n(17653,5)\n(13819,3)\n(16745,18)\n(14689,1)\n(14383,3)\n(16697,1)\n(12873,1)\n(14513,4)\n(13607,1)\n(15669,5)\n(16769,1)\n(14331,2)\n(12875,2)\n(15895,1)\n(17975,14)\n(13887,1)\n(14473,2)\n(16383,2)\n(15219,1)\n(17423,4)\n(12923,1)\n(14155,1)\n(16573,4)\n(16945,19)\n(15689,2)\n(14581,1)\n(13781,1)\n(16187,17)\n(16401,20)\n(13991,7)\n(12657,5)\n(17709,1)\n(12515,1)\n(13751,1)\n(17287,7)\n(15733,1)\n(14083,9)\n(16411,2)\n(12623,1)\n(13601,2)\n(12371,2)\n(14669,3)\n(16441,2)\n(18067,1)\n(13481,8)\n(17603,5)\n(14897,4)\n(13551,1)\n(13515,4)\n(12567,11)\n(12883,4)\n(16891,5)\n(15073,4)\n(16601,1)\n(12685,6)\n(13349,1)\n(17451,10)\n(15493,7)\n(12987,3)\n(14589,1)\n(16495,3)\n(15827,20)\n(17521,4)\n(14759,3)\n(12633,5)\n(16709,5)\n(13663,1)\n(15257,2)\n(16711,5)\n(15907,3)\n(17079,1)\n(14287,4)\n(16049,3)\n(12621,23)\n(17347,1)\n(14853,3)\n(17017,27)\n(14741,6)\n(16803,1)\n(14023,2)\n(17375,4)\n(15577,3)\n(13721,1)\n(12435,2)\n(17789,1)\n(17251,1)\n(14219,1)\n(16921,1)\n(15025,1)\n(14653,7)\n(16491,1)\n(13379,3)\n(13563,2)\n(13667,1)\n(15083,1)\n(15345,2)\n(16419,7)\n(15579,2)\n(14463,3)\n(14851,2)\n(13321,2)\n(15215,6)\n(15347,1)\n(14185,1)\n(17033,3)\n(17957,1)\n(14935,1)\n(17339,2)\n(15341,1)\n(18099,1)\n(16041,3)\n(16551,3)\n(12531,1)\n(15311,118)\n(13247,4)\n(15389,1)\n(14443,7)\n(18179,6)\n(17685,7)\n(17793,1)\n(17321,2)\n(17771,2)\n(12877,12)\n(15185,1)\n(14143,1)\n(15135,2)\n(12581,1)\n(16885,3)\n(16315,1)\n(13753,1)\n(12353,1)\n(17869,5)\n(13145,5)\n(13833,1)\n(12447,1)\n(18109,31)\n(15511,5)\n(14133,5)\n(13889,1)\n(12519,1)\n(14029,2)\n(16823,1)\n(12417,12)\n(14775,3)\n(13297,4)\n(15745,6)\n(13999,15)\n(14141,6)\n(17029,2)\n(17193,9)\n(16163,3)\n(14867,4)\n(15453,7)\n(13345,2)\n(13133,2)\n(14377,2)\n(17863,6)\n(17597,1)\n(15917,1)\n(15963,2)\n(13867,3)\n(12917,1)\n(16059,6)\n(16345,1)\n(16903,1)\n(14893,2)\n(13859,1)\n(16407,10)\n(13391,1)\n(14555,2)\n(17977,1)\n(15247,1)\n(12513,2)\n(13339,1)\n(13517,5)\n(15625,8)\n(15445,1)\n(13033,1)\n(15701,4)\n(14401,14)\n(17531,2)\n(14045,4)\n(16905,8)\n(15699,1)\n(17831,1)\n(13449,1)\n(15069,1)\n(17969,2)\n(14569,1)\n(14527,86)\n(15643,6)\n(14627,1)\n(12735,2)\n(17353,2)\n(14693,1)\n(15657,1)\n(16893,1)\n(17919,1)\n(16775,11)\n(15113,4)\n(16255,10)\n(14223,4)\n(13001,15)\n(14921,2)\n(18189,3)\n(16593,3)\n(15473,10)\n(14243,14)\n(13631,12)\n(16423,1)\n(17809,15)\n(15469,4)\n(17091,10)\n(15187,18)\n(14871,4)\n(14477,5)\n(14329,14)\n(15105,7)\n(15781,4)\n(16843,17)\n(14573,13)\n(17941,1)\n(13967,1)\n(16583,1)\n(12921,50)\n(14341,9)\n(14041,1)\n(13029,3)\n(14307,6)\n(12763,2)\n(14387,3)\n(16619,2)\n(12997,7)\n(15235,12)\n(12605,1)\n(14673,5)\n(16965,1)\n(18123,2)\n(14121,6)\n(15955,16)\n(14247,1)\n(18017,3)\n(15109,2)\n(15683,1)\n(15533,5)\n(13579,2)\n(14803,3)\n(15521,13)\n(17973,1)\n(18213,1)\n(17765,3)\n(17211,9)\n(12865,3)\n(15009,3)\n(16667,2)\n(17913,2)\n(15265,2)\n(18119,1)\n(17169,4)\n(14849,28)\n(14409,7)\n(13617,3)\n(18283,16)\n(13927,1)\n(17349,1)\n(13047,18)\n(15861,9)\n(12931,20)\n(14869,3)\n(13621,1)\n(17905,4)\n(15241,9)\n(14431,2)\n(15101,3)\n(17267,2)\n(12817,1)\n(15213,3)\n(13395,1)\n(15343,1)\n(16873,10)\n(15071,2)\n(16569,1)\n(14547,9)\n(14725,1)\n(13153,1)\n(13649,2)\n(18075,14)\n(12779,12)\n(12493,3)\n(12377,2)\n(13979,1)\n(18027,1)\n(16589,3)\n(17931,2)\n(14349,1)\n(12901,36)\n(16005,4)\n(16955,5)\n(14163,4)\n(17761,1)\n(17813,7)\n(13077,4)\n(17279,1)\n(13435,9)\n(16429,1)\n(14645,2)\n(16849,1)\n(17511,46)\n(18223,27)\n(15869,2)\n(16477,7)\n(14551,2)\n(12641,1)\n(13081,21)\n(15831,4)\n(14567,3)\n(13291,1)\n(14507,7)\n(13813,5)\n(12477,9)\n(12971,89)\n(14679,1)\n(14733,15)\n(16851,3)\n(17175,5)\n(16483,1)\n(16557,2)\n(13897,1)\n(13381,7)\n(16781,2)\n(17537,2)\n(14057,18)\n(17385,1)\n(15297,4)\n(13101,1)\n(17415,1)\n(14321,5)\n(15339,3)\n(16449,3)\n(17595,2)\n(16957,2)\n(15863,2)\n(18219,11)\n(13439,1)\n(16791,8)\n(15985,3)\n(12573,1)\n(16721,1)\n(13403,1)\n(17247,1)\n(16405,2)\n(16641,1)\n(16463,7)\n(18145,4)\n(14135,15)\n(12833,1)\n(13807,1)\n(17951,4)\n(15801,4)\n(14093,1)\n(15969,4)\n(14227,15)\n(13627,7)\n(12597,5)\n(15111,3)\n(17197,1)\n(16527,1)\n(14035,5)\n(18121,2)\n(18095,2)\n(15537,1)\n(13875,5)\n(15769,29)\n(16999,2)\n(14199,1)\n(15829,2)\n(14951,1)\n(13715,8)\n(17179,3)\n(14739,8)\n(13581,1)\n(17873,6)\n(14291,12)\n(13085,3)\n(12399,4)\n(17679,2)\n(16339,1)\n(14051,26)\n(15841,6)\n(16963,1)\n(14233,5)\n(17819,8)\n(14995,2)\n(13521,3)\n(16633,7)\n(16427,2)\n(15607,1)\n(12739,2)\n(12785,2)\n(12963,9)\n(17885,1)\n(15163,2)\n(16327,6)\n(16247,1)\n(17317,5)\n(12569,35)\n(15299,11)\n(16689,3)\n(17227,6)\n(14335,2)\n(18239,5)\n(17277,2)\n(17297,1)\n(14439,1)\n(15021,13)\n(17037,2)\n(12967,4)\n(15677,1)\n(14079,1)\n(17307,1)\n(16227,2)\n(16261,4)\n(15721,1)\n(17725,14)\n(17085,6)\n(17361,3)\n(13955,2)\n(14173,4)\n(16379,5)\n(17921,4)\n(16009,4)\n(15791,3)\n(12517,6)\n(13285,4)\n(13389,3)\n(15159,34)\n(12991,2)\n(16403,2)\n(13723,1)\n(17123,1)\n(13865,4)\n(16961,1)\n(14053,2)\n(14081,4)\n(15435,1)\n(12653,2)\n(15313,1)\n(17829,1)\n(12937,4)\n(14317,1)\n(14825,12)\n(18261,2)\n(12749,8)\n(15529,12)\n(12647,13)\n(15585,1)\n(13623,7)\n(16349,1)\n(14267,7)\n(12895,3)\n(14647,1)\n(15153,1)\n(16351,1)\n(13003,3)\n(12449,4)\n(12951,8)\n(14801,1)\n(18257,12)\n(15429,3)\n(16309,3)\n(14515,6)\n(16305,1)\n(16279,4)\n(16685,2)\n(13571,12)\n(14015,1)\n(15133,3)\n(12725,1)\n(12871,2)\n(13375,2)\n(12925,2)\n(14055,1)\n(15417,1)\n(17843,1)\n(16413,1)\n(14427,2)\n(12985,3)\n(16337,1)\n(16643,1)\n(14031,23)\n(14289,6)\n(15381,2)\n(17233,1)\n(16173,7)\n(17879,1)\n(17601,1)\n(16015,4)\n(15303,1)\n(14375,1)\n(17059,5)\n(12359,6)\n(13759,2)\n(16347,2)\n(13173,2)\n(14087,2)\n(13103,1)\n(12939,8)\n(17567,10)\n(17719,18)\n(14667,27)\n(15897,2)\n(14457,1)\n(16523,28)\n(14711,12)\n(16987,7)\n(18209,1)\n(17965,14)\n(13923,1)\n(12561,1)\n(16545,1)\n(18065,15)\n(15269,1)\n(16837,12)\n(17157,3)\n(16341,6)\n(13519,2)\n(12585,4)\n(17219,1)\n(16121,2)\n(15349,2)\n(12713,1)\n(17573,4)\n(17703,3)\n(12489,1)\n(17855,1)\n(17811,51)\n(12811,3)\n(17629,9)\n(14885,1)\n(15837,1)\n(13193,1)\n(14881,1)\n(13827,3)\n(13487,3)\n(17071,14)\n(14971,3)\n(15603,1)\n(14757,1)\n(15855,5)\n(14193,2)\n(17705,10)\n(18041,22)\n(14345,1)\n(16929,7)\n(15553,1)\n(13495,6)\n(17147,6)\n(13549,8)\n(18269,2)\n(16657,4)\n(16595,1)\n(17171,1)\n(15773,1)\n(14965,2)\n(12625,3)\n(18225,17)\n(14895,24)\n(17389,43)\n(16629,2)\n(16567,2)\n(13483,1)\n(13577,5)\n(13431,2)\n(13709,17)\n(16447,1)\n(16425,1)\n(13509,7)\n(12483,13)\n(17481,5)\n(15703,1)\n(18101,2)\n(15713,3)\n(13527,8)\n(14883,7)\n(18055,11)\n(16863,4)\n(12659,1)\n(16029,76)\n(14175,7)\n(14293,4)\n(12993,4)\n(13695,15)\n(16213,1)\n(13841,1)\n(13479,3)\n(12759,3)\n(12415,26)\n(17427,1)\n(14603,1)\n(13835,4)\n(12839,16)\n(13937,1)\n(16529,1)\n(14643,3)\n(17999,2)\n(12853,9)\n(12891,3)\n(15379,8)\n(13453,2)\n(17405,5)\n(17289,4)\n(15587,4)\n(12431,18)\n(13895,5)\n(13441,1)\n(15675,3)\n(12995,2)\n(14019,4)\n(13311,2)\n(16281,1)\n(16759,4)\n(15007,1)\n(17767,1)\n(17733,2)\n(15865,3)\n(15939,16)\n(16127,1)\n(14461,3)\n(16553,14)\n(12981,2)\n(16063,1)\n(14715,4)\n(17443,1)\n(15047,1)\n(14681,3)\n(16139,3)\n(15571,4)\n(13161,1)\n(16883,2)\n(15321,4)\n(17715,1)\n(16997,3)\n(15641,4)\n(12453,1)\n(16715,1)\n(17155,2)\n(17069,13)\n(14389,5)\n(16045,4)\n(13099,1)\n(16779,28)\n(15541,1)\n(18169,1)\n(13947,1)\n(12965,1)\n(16023,3)\n(12635,2)\n(17255,2)\n(17045,3)\n(17633,6)\n(13177,1)\n(13725,11)\n(15505,7)\n(15471,1)\n(16681,6)\n(16313,2)\n(12729,1)\n(16097,1)\n(14451,2)\n(13569,2)\n(15507,1)\n(17659,14)\n(13995,6)\n(15327,1)\n(14309,10)\n(18077,11)\n(12603,1)\n(13419,1)\n(16693,2)\n(14075,3)\n(16773,1)\n(14905,3)\n(13411,1)\n(18249,1)\n(17899,1)\n(16115,8)\n(12823,5)\n(13359,2)\n(18105,1)\n(16587,1)\n(13369,2)\n(14789,1)\n(14411,1)\n(17955,4)\n(16525,29)\n(17637,2)\n(16461,1)\n(18073,13)\n(12821,1)\n(14963,5)\n(16713,21)\n(17163,2)\n(12815,2)\n(12945,1)\n(16535,1)\n(13117,8)\n(14903,10)\n(16989,6)\n(15447,1)\n(12383,6)\n(15785,8)\n(16729,26)\n(13363,2)\n(18001,2)\n(14047,7)\n(16271,6)\n(13295,2)\n(13151,2)\n(13575,5)\n(18251,1)\n(13593,6)\n(13599,33)\n(15411,5)\n(15557,1)\n(16983,8)\n(14623,6)\n(14117,1)\n(12797,3)\n(14491,2)\n(17329,2)\n(16085,5)\n(17655,8)\n(15393,2)\n(15045,3)\n(13959,3)\n(14539,2)\n(17631,3)\n(17359,1)\n(17707,2)\n(14785,2)\n(15367,5)\n(16743,8)\n(17887,1)\n(13525,2)\n(17125,1)\n(14355,1)\n(17301,1)\n(14805,4)\n(15573,2)\n(13953,7)\n(15355,2)\n(13803,1)\n(14619,2)\n(14483,2)\n(17797,3)\n(12609,3)\n(15427,3)\n(14511,6)\n(12601,6)\n(14367,19)\n(15143,1)\n(16181,1)\n(12697,5)\n(14625,5)\n(15717,1)\n(12407,5)\n(14607,17)\n(13049,2)\n(16241,13)\n(15397,1)\n(17861,9)\n(16169,4)\n(12753,11)\n(16917,1)\n(15291,20)\n(15251,15)\n(17259,2)\n(12885,4)\n(18133,2)\n(15145,4)\n(15275,2)\n(16209,5)\n(14147,3)\n(13211,3)\n(12709,26)\n(15597,2)\n(12957,12)\n(16995,1)\n(13127,1)\n(13159,5)\n(16669,4)\n(15783,1)\n(15223,3)\n(14549,1)\n(15881,8)\n(17877,1)\n(12689,2)\n(13747,1)\n(17935,2)\n(17337,7)\n(13451,6)\n(18233,1)\n(12535,2)\n(18015,1)\n(15525,4)\n(16257,1)\n(15225,1)\n(16025,1)\n(17569,1)\n(15027,6)\n(16205,4)\n(12441,1)\n(12667,1)\n(14655,5)\n(13357,1)\n(14633,1)\n(14503,6)\n(18171,7)\n(15093,9)\n(13213,6)\n(14453,1)\n(14665,7)\n(17109,8)\n(14237,1)\n(14407,9)\n(12929,2)\n(16717,9)\n(14359,6)\n(15485,3)\n(15681,6)\n(14167,4)\n(13397,6)\n(16031,2)\n(13837,2)\n(15123,2)\n(13949,6)\n(15925,1)\n(17593,6)\n(16133,46)\n(17911,1)\n(16953,1)\n(16283,7)\n(12831,1)\n(13005,3)\n(14799,1)\n(13171,5)\n(17469,6)\n(16033,27)\n(16377,1)\n(16753,1)\n(13531,2)\n(12837,1)\n(13983,13)\n(13993,12)\n(14565,6)\n(18059,4)\n(15059,11)\n(15167,1)\n(16445,1)\n(16211,2)\n(17315,43)\n(12379,3)\n(14873,1)\n(16265,11)\n(14259,1)\n(14371,1)\n(15933,3)\n(14297,6)\n(13115,14)\n(18273,3)\n(17739,8)\n(14769,10)\n(14837,5)\n(14593,3)\n(16737,1)\n(14271,1)\n(16357,3)\n(14397,23)\n(16811,2)\n(14675,1)\n(14373,1)\n(16353,23)\n(15975,1)\n(17263,1)\n(15877,3)\n(15845,10)\n(14177,5)\n(15221,2)\n(12403,2)\n(16207,1)\n(17411,4)\n(16395,5)\n(17663,9)\n(15497,3)\n(13253,2)\n(14975,1)\n(14907,10)\n(16571,5)\n(17027,7)\n(16607,16)\n(12409,7)\n(14161,3)\n(14737,3)\n(13245,1)\n(17403,1)\n(15609,2)\n(14937,4)\n(13735,8)\n(17727,2)\n(15277,1)\n(16623,1)\n(17459,2)\n(14621,6)\n(15205,3)\n(14273,4)\n(17859,1)\n(15097,1)\n(16755,5)\n(18205,2)\n(15419,1)\n(13075,1)\n(18263,4)\n(14973,3)\n(18125,5)\n(16019,10)\n(16861,3)\n(18079,4)\n(14649,4)\n(14855,2)\n(13013,15)\n(16499,5)\n(16043,4)\n(16655,6)\n(12539,5)\n(16325,5)\n(12613,6)\n(16117,1)\n(15883,2)\n(16013,54)\n(13467,2)\n(13131,4)\n(12669,4)\n(13761,2)\n(14165,1)\n(17101,4)\n(15549,4)\n(16017,1)\n(16497,6)\n(13771,5)\n(16913,1)\n(17553,1)\n(16091,2)\n(15847,2)\n(14211,13)\n(14735,34)\n(13243,1)\n(14923,1)\n(16385,3)\n(17181,2)\n(17775,1)\n(15555,20)\n(12717,3)\n(17785,1)\n(15315,3)\n(16119,2)\n(13059,1)\n(15307,1)\n(17191,7)\n(17979,5)\n(14731,3)\n(15057,2)\n(14037,2)\n(14875,5)\n(17461,3)\n(17447,2)\n(13329,4)\n(17041,4)\n(17643,1)\n(14489,1)\n(17923,1)\n(15639,1)\n(12455,6)\n(12627,7)\n(16579,1)\n(15065,6)\n(17325,1)\n(16143,7)\n(13283,2)\n(15809,6)\n(13169,2)\n(16899,6)\n(14449,4)\n(12497,1)\n(15091,2)\n(16189,2)\n(14523,1)\n(14421,2)\n(14205,4)\n(17105,2)\n(14915,3)\n(12795,1)\n(15653,2)\n(16825,2)\n(17205,1)\n(15405,1)\n(18143,2)\n(15987,7)\n(14639,8)\n(14727,1)\n(17827,5)\n(17711,2)\n(14403,5)\n(12949,10)\n(14327,1)\n(16927,3)\n(13235,2)\n(15901,3)\n(17799,11)\n(14073,2)\n(13587,3)\n(13635,1)\n(12547,2)\n(15125,23)\n(15755,8)\n(16877,6)\n(13277,4)\n(16581,2)\n(14631,3)\n(15903,8)\n(18141,1)\n(12719,3)\n(13863,2)\n(13485,1)\n(12507,4)\n(14419,6)\n(17367,1)\n(14357,1)\n(12571,2)\n(13693,2)\n(13061,1)\n(13647,5)\n(17031,2)\n(17609,6)\n(13737,1)\n(13263,35)\n(13097,14)\n(17947,1)\n(12681,27)\n(16847,1)\n(16057,10)\n(16801,5)\n(13027,6)\n(14953,1)\n(14465,3)\n(14553,5)\n(17025,3)\n(13255,3)\n(17357,2)\n(14085,19)\n(14467,4)\n(17781,2)\n(15867,16)\n(15971,12)\n(16295,4)\n(12593,3)\n(16093,1)\n(17499,1)\n(16509,1)\n(13853,2)\n(12451,6)\n(16061,1)\n(17371,3)\n(17651,14)\n(17049,11)\n(15569,5)\n(18245,8)\n(12933,4)\n(12491,1)\n(14229,5)\n(18227,1)\n(18005,2)\n(16457,1)\n(14475,6)\n(12893,1)\n(16083,2)\n(16639,4)\n(15063,1)\n(16249,5)\n(12701,2)\n(15041,1)\n(13655,2)\n(15605,5)\n(13203,4)\n(12397,2)\n(16765,1)\n(17117,1)\n(14861,1)\n(13929,3)\n(18221,6)\n(13265,5)\n(13437,7)\n(15567,1)\n(13473,3)\n(15061,55)\n(13877,1)\n(13139,8)\n(12637,10)\n(12849,2)\n(17295,3)\n(16747,4)\n(13347,1)\n(17489,2)\n(16985,11)\n(12977,1)\n(17929,5)\n(12827,3)\n(13823,2)\n(14891,2)\n(15623,1)\n(18113,1)\n(17245,1)\n(13209,11)\n(15075,1)\n(17159,4)\n(17343,1)\n(15351,10)\n(15039,52)\n(14541,8)\n(14089,1)\n(13229,1)\n(16229,2)\n(15919,2)\n(17867,8)\n(17897,4)\n(15743,4)\n(16065,1)\n(13319,36)\n(17095,6)\n(17525,1)\n(17189,2)\n(12955,14)\n(17463,6)\n(14821,1)\n(13919,3)\n(13659,3)\n(17365,8)\n(16485,1)\n(12425,1)\n(14305,5)\n(13475,4)\n(14817,2)\n(14823,3)\n(17857,25)\n(13267,27)\n(15659,1)\n(16613,1)\n(12947,11)\n(15709,1)\n(14311,2)\n(15483,4)\n(17693,3)\n(16147,1)\n(17571,4)\n(16191,25)\n(13809,1)\n(15099,1)\n(17549,2)\n(15637,1)\n(16533,5)\n(15443,8)\n(16027,7)\n(15139,2)\n(16243,2)\n(17513,1)\n(14887,1)\n(16603,2)\n(16221,3)\n(14379,2)\n(17865,27)\n(13011,1)\n(15165,1)\n(14125,3)\n(16767,11)\n(13429,4)\n(16531,7)\n(12361,1)\n(12755,4)\n(18009,2)\n(17805,1)\n(17551,1)\n(15839,5)\n(16109,2)\n(14705,1)\n(12855,1)\n(12557,5)\n(12787,3)\n(14027,1)\n(12619,13)\n(18061,10)\n(16239,3)\n(15789,1)\n(17387,2)\n(17995,1)\n(15803,1)\n(13385,1)\n(15719,14)\n(16513,4)\n(13849,2)\n(15227,5)\n(12395,15)\n(16215,1)\n(14709,14)\n(15523,1)\n(17987,1)\n(13529,2)\n(17779,5)\n(13343,2)\n(12919,8)\n(17165,1)\n(15197,5)\n(12781,5)\n(14221,10)\n(14959,5)\n(13925,6)\n(17047,3)\n(13719,5)\n(16159,1)\n(15399,3)\n(16871,7)\n(16079,3)\n(12943,1)\n(14997,4)\n(17675,41)\n(16409,5)\n(14591,4)\n(13447,4)\n(14863,1)\n(14601,1)\n(12599,7)\n(18231,6)\n(14583,5)\n(12615,4)\n(13931,3)\n(13221,2)\n(13501,2)\n(14703,1)\n(15325,1)\n(18117,1)\n(18193,3)\n(13573,2)\n(14459,1)\n(15935,2)\n(12583,18)\n(16943,3)\n(17509,11)\n(14107,8)\n(12649,4)\n(15889,2)\n(16225,5)\n(14913,4)\n(15079,5)\n(18185,1)\n(14543,21)\n(13639,1)\n(13325,1)\n(16909,2)\n(12913,5)\n(17623,1)\n(13069,27)\n(15983,4)\n(17925,1)\n(13137,9)\n(13015,5)\n(17409,2)\n(16387,1)\n(15199,4)\n(16817,13)\n(13149,4)\n(13455,4)\n(15843,1)\n(13911,9)\n(15599,2)\n(14841,6)\n(15239,3)\n(12559,3)\n(12423,9)\n(13717,7)\n(15673,4)\n(16161,26)\n(17527,6)\n(16793,1)\n(16369,3)\n(13901,5)\n(13309,5)\n(13507,4)\n(14265,2)\n(13305,10)\n(17997,12)\n(15195,1)\n(18019,1)\n(17133,7)\n(13223,2)\n(15373,13)\n(16433,1)\n(13707,2)\n(15365,9)\n(13811,4)\n(18155,4)\n(14815,2)\n(14499,3)\n(17889,2)\n(15249,15)\n(18281,1)\n(16931,21)\n(15977,2)\n(18229,20)\n(12427,5)\n(17585,4)\n(18237,5)\n(15129,11)\n(14755,12)\n(12841,26)\n(14005,5)\n(13055,4)\n(13185,1)\n(13689,1)\n(16627,1)\n(16979,8)\n(15645,1)\n(16123,1)\n(15725,1)\n(17001,11)\n(16969,3)\n(15823,2)\n(15891,1)\n(15763,3)\n(16813,10)\n(16415,1)\n(18151,2)\n(12553,14)\n(12651,1)\n(16735,7)\n(15949,2)\n(15649,2)\n(16101,3)\n(15333,1)\n(16625,1)\n(17213,11)\n(12847,1)\n(16235,6)\n(13307,1)\n(13327,9)\n(12457,12)\n(14819,2)\n(16591,1)\n(12727,9)\n(16193,1)\n(14493,7)\n(13831,6)\n(15121,2)\n(16539,4)\n(13313,5)\n(16967,1)\n(15593,1)\n(13165,2)\n(16807,3)\n(17043,4)\n(17063,11)\n(14191,14)\n(17949,52)\n(15329,5)\n(17589,4)\n(16889,3)\n(16763,2)\n(17491,11)\n(17787,4)\n(14323,4)\n(15467,4)\n(14423,1)\n(16179,1)\n(17505,2)\n(16835,2)\n(16621,4)\n(14099,12)\n(12695,4)\n(16145,18)\n(14159,14)\n(13673,2)\n(12879,4)\n(15581,14)\n(12481,11)\n(14813,2)\n(15261,1)\n(13989,2)\n(16875,9)\n(18093,5)\n(18081,3)\n(16103,6)\n(16113,1)\n(13885,2)\n(13113,40)\n(17457,5)\n(15255,1)\n(17111,1)\n(14481,2)\n(13189,2)\n(12541,3)\n(17723,6)\n(16833,4)\n(12355,1)\n(15811,9)\n(13477,8)\n(17769,12)\n(13873,4)\n(18033,1)\n(14333,2)\n(14857,3)\n(15707,4)\n(16503,5)\n(13611,4)\n(12589,2)\n(14067,2)\n(13603,1)\n(12935,8)\n(15799,3)\n(13227,1)\n(16881,1)\n(17377,21)\n(12391,1)\n(15127,1)\n(14723,6)\n(17883,4)\n(17545,3)\n(17519,7)\n(17891,1)\n(18235,3)\n(13589,2)\n(18211,5)\n(15663,1)\n(14629,3)\n(13261,2)\n(15749,4)\n(17265,2)\n(17235,2)\n(17535,1)\n(15415,1)\n(16275,1)\n(15449,5)\n(15951,3)\n(15679,4)\n(14009,3)\n(12587,1)\n(15107,8)\n(16947,1)\n(15407,4)\n(18085,2)\n(15335,1)\n(16141,1)\n(15423,1)\n(15119,1)\n(17323,9)\n(15243,1)\n(13355,1)\n(16511,3)\n(12757,19)\n(12461,2)\n(17737,2)\n(14415,18)\n(16153,5)\n(18161,6)\n(15561,5)\n(16323,1)\n(15795,1)\n(13091,2)\n(13505,8)\n(14485,1)\n(14261,2)\n(16157,4)\n(15737,12)\n(14395,12)\n(12611,1)\n(15589,4)\n(16723,2)\n(13829,1)\n(13067,1)\n(13093,13)\n(14171,1)\n(14985,2)\n(15793,4)\n(16919,11)\n(13963,4)\n(13763,3)\n(16287,1)\n(17229,2)\n(14745,6)\n(15263,1)\n(17515,4)\n(16333,22)\n(12789,1)\n(17591,8)\n(13791,3)\n(15433,3)\n(16897,3)\n(13373,3)\n(17697,1)\n(14761,2)\n(16907,5)\n(15835,4)\n(16475,4)\n(15747,3)\n(16771,5)\n(12693,6)\n(16519,2)\n(16923,26)\n(17203,6)\n(12845,4)\n(12463,7)\n(14699,1)\n(17937,7)\n(13427,3)\n(16203,5)\n(13279,2)\n(15517,1)\n(13421,3)\n(14277,4)\n(18173,4)\n(14747,2)\n(12393,4)\n(18215,1)\n(16217,4)\n(16805,2)\n(17673,7)\n(15899,1)\n(17373,4)\n(13045,1)\n(12545,2)\n(14145,5)\n(16131,6)\n(12347,7)\n(16367,2)\n(16555,2)\n(13533,3)\n(13121,2)\n(15967,2)\n(12703,2)\n(14127,3)\n(17097,9)\n(17291,1)\n(13503,1)\n(16233,5)\n(14049,6)\n(13643,3)\n(13317,9)\n(14149,3)\n(15621,6)\ntotalCust: Long = 25900\ncustIdInvoice: Unit = ()\n"}]},"apps":[],"jobName":"paragraph_1586917553000_-1044478161","id":"20190922-190215_1478690977","dateCreated":"2020-04-15T02:25:53+0000","dateStarted":"2020-04-17T16:59:59+0000","dateFinished":"2020-04-17T17:00:03+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:15182"},{"text":"%md\n#### SPARK UI\nEvery Spark Job has a web UI for monitroing and debuging purposes.\nGo to GCP > your hadoop cluster > web interfaces > Spark History Server > Spark UI. ","user":"anonymous","dateUpdated":"2020-04-17T16:43:48+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h4>SPARK UI</h4>\n<p>Every Spark Job has a web UI for monitroing and debuging purposes.<br/>Go to GCP &gt; your hadoop cluster &gt; web interfaces &gt; Spark History Server &gt; Spark UI.</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1586917553001_-719837518","id":"20190521-114127_1095254606","dateCreated":"2020-04-15T02:25:53+0000","dateStarted":"2020-04-17T16:43:48+0000","dateFinished":"2020-04-17T16:43:48+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:15183"},{"text":"%md\n#### RDD join\n\nPrint `customerId, name, country` using `customers.txt` and  `online-retail-dataset_clean.txt` files\n\n1. Load `datasets/online_retail/customers.txt` to `RDD[Customer]` where `Customer` is a case class as following\n`case class Customer(customerId:Int, name: String)`\n2. Join `RDD[Customer]` with `RDD[item]` on `customerId`\n3. Select uniq `customerId, name, country`\n\n```sql\nSELECT retail.customerID, customer.name, country\nFROM customer LEFT JOIN retail ON customer.id = retail.customerId\n```\n\n**Sample Output**\n```bash\n//resultRdd.take(3)\nres553: Array[(Int, String, String)] = Array((13311,Petra M. Dalton,United Kingdom), (12367,Wade S. Blair,Denmark), (18144,Gage A. Sharpe,United Kingdom))\n```","user":"anonymous","dateUpdated":"2020-04-17T16:43:54+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"colWidth":6,"editorMode":"ace/mode/markdown","fontSize":9,"editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h4>RDD join</h4>\n<p>Print <code>customerId, name, country</code> using <code>customers.txt</code> and <code>online-retail-dataset_clean.txt</code> files</p>\n<ol>\n  <li>Load <code>datasets/online_retail/customers.txt</code> to <code>RDD[Customer]</code> where <code>Customer</code> is a case class as following<br/><code>case class Customer(customerId:Int, name: String)</code></li>\n  <li>Join <code>RDD[Customer]</code> with <code>RDD[item]</code> on <code>customerId</code></li>\n  <li>Select uniq <code>customerId, name, country</code></li>\n</ol>\n<pre><code class=\"sql\">SELECT retail.customerID, customer.name, country\nFROM customer LEFT JOIN retail ON customer.id = retail.customerId\n</code></pre>\n<p><strong>Sample Output</strong></p>\n<pre><code class=\"bash\">//resultRdd.take(3)\nres553: Array[(Int, String, String)] = Array((13311,Petra M. Dalton,United Kingdom), (12367,Wade S. Blair,Denmark), (18144,Gage A. Sharpe,United Kingdom))\n</code></pre>\n</div>"}]},"apps":[],"jobName":"paragraph_1586917553002_-1188362032","id":"20190519-183851_617743118","dateCreated":"2020-04-15T02:25:53+0000","dateStarted":"2020-04-17T16:43:54+0000","dateFinished":"2020-04-17T16:43:54+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:15184"},{"text":"%md\n### Uploading `customers.txt` data to HDFS\n- Download data and upload it on HDFS ","user":"anonymous","dateUpdated":"2020-04-17T16:43:51+0000","config":{"colWidth":6,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Uploading <code>customers.txt</code> data to HDFS</h3>\n<ul>\n  <li>Download data and upload it on HDFS</li>\n</ul>\n</div>"}]},"apps":[],"jobName":"paragraph_1587068848857_1089867057","id":"20200416-202728_1138014038","dateCreated":"2020-04-16T20:27:28+0000","dateStarted":"2020-04-17T16:43:51+0000","dateFinished":"2020-04-17T16:43:52+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:15185"},{"text":"printMsg(\"RDD Join: #1\")\n\n//Loading customer.txt file\nval customersData = sc.textFile(\"hdfs:///user/aayushi/datasets/online_retail/customers.txt\")\n\n//Parsing RDD as customer\ncase class Customer(customerId:Int, name: String)\nval parsedCustomer: (String) => Customer = (row:String) => {\n    val tokens = row.split(\",\")\n    new Customer(tokens(0).toInt, tokens(1).trim())\n}\nval customerRDD = customersData.map(parsedCustomer)\ncustomerRDD.take(5).foreach(println)\n","user":"anonymous","dateUpdated":"2020-04-17T18:40:35+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":6,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"---------RDD Join: #1---------\nCustomer(15930,Philip V. Bradford)\nCustomer(17796,Alvin V. Ellison)\nCustomer(15550,Nero D. Walls)\nCustomer(17934,Uma S. Stephens)\nCustomer(17312,Azalia D. Gordon)\ncustomersData: org.apache.spark.rdd.RDD[String] = hdfs:///user/aayushi/datasets/online_retail/customers.txt MapPartitionsRDD[230] at textFile at <console>:25\ndefined class Customer\nparsedCustomer: String => Customer = <function1>\ncustomerRDD: org.apache.spark.rdd.RDD[Customer] = MapPartitionsRDD[231] at map at <console>:33\n"}]},"apps":[],"jobName":"paragraph_1586917553003_1978767429","id":"20190922-193513_1093352183","dateCreated":"2020-04-15T02:25:53+0000","dateStarted":"2020-04-17T18:40:36+0000","dateFinished":"2020-04-17T18:40:36+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:15186"},{"text":"%spark \nprintln(\"-----Rdd Join: #2-----\")\nprintMsg(\"Create tuple with customerID and Item case class\")\nval itemsTuple = rddItem.filter(_.customerID != None).map(item => (item.customerID.get, item))\nitemsTuple.takeSample(false, 5, 5).foreach(println)\n\nprintln()\n\nprintMsg(\"Create typle with customerId and Customer case class\")\nval customersTuple = customerRDD.filter(_.customerId != None).map(customer => (customer.customerId, customer))\ncustomersTuple.takeSample(false, 5, 5).foreach(println)\n\nprintln()\n\nprintMsg(\"Join the two tuples\")\n//Here, join these two tuples using customerId as key. \n//There may be customers with no invoices. To filter such customers we use leftOuterJoin. \nval joinCustomersInfo = customersTuple.leftOuterJoin(itemsTuple).distinct()\njoinCustomersInfo.take(5).foreach(println)\n\n","user":"anonymous","dateUpdated":"2020-04-17T18:40:41+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{"0":{"graph":{"mode":"table","height":325.994,"optionOpen":false}}},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"-----Rdd Join: #2-----\n---------Create tuple with customerID and Item case class---------\n(15311,Item(542003,21671,Some(RED SPOT CERAMIC DRAWER KNOB),6,1/25/2011 11:07,1.25,Some(15311),United Kingdom))\n(14960,Item(580050,22558,Some(CLOTHES PEGS RETROSPOT PACK 24 ),1,12/1/2011 12:54,1.65,Some(14960),United Kingdom))\n(13806,Item(570090,22526,Some(WHEELBARROW FOR CHILDREN ),3,10/7/2011 11:43,12.75,Some(13806),United Kingdom))\n(15034,Item(575867,22185,Some(SLATE TILE NATURAL HANGING),8,11/11/2011 12:44,1.65,Some(15034),United Kingdom))\n(15373,Item(577610,21843,Some(RED RETROSPOT CAKE STAND),4,11/21/2011 9:55,10.95,Some(15373),United Kingdom))\n\n---------Create typle with customerId and Customer case class---------\n(15433,Customer(15433,Marshall Y. Conway))\n(15987,Customer(15987,Elmo J. Combs))\n(17863,Customer(17863,Lillian R. Rivera))\n(17038,Customer(17038,Suki A. Carlson))\n(16080,Customer(16080,Marcia S. Newton))\n\n---------Join the two tuples---------\n(15508,(Customer(15508,Wade P. Owen),Some(Item(555501,23171,Some(REGENCY TEA PLATE GREEN ),3,6/3/2011 15:37,1.65,Some(15508),United Kingdom))))\n(15563,(Customer(15563,Lillian R. Rivera),Some(Item(577029,23691,Some(WRAP KEEP CALM BIRTHDAY),25,11/17/2011 12:59,0.42,Some(15563),United Kingdom))))\n(16374,(Customer(16374,Phillip J. Preston),Some(Item(569533,23265,Some(SET OF 3 WOODEN TREE DECORATIONS),1,10/4/2011 15:21,1.25,Some(16374),United Kingdom))))\n(13081,(Customer(13081,Flavia Q. Bright),Some(Item(574328,21975,Some(PACK OF 60 DINOSAUR CAKE CASES),24,11/4/2011 9:05,0.55,Some(13081),United Kingdom))))\n(17932,(Customer(17932,Sydnee Q. Finley),Some(Item(557260,21260,Some(FIRST AID TIN),6,6/19/2011 10:39,3.25,Some(17932),United Kingdom))))\nitemsTuple: org.apache.spark.rdd.RDD[(Int, Item)] = MapPartitionsRDD[233] at map at <console>:51\ncustomersTuple: org.apache.spark.rdd.RDD[(Int, Customer)] = MapPartitionsRDD[236] at map at <console>:57\njoinCustomersInfo: org.apache.spark.rdd.RDD[(Int, (Customer, Option[Item]))] = MapPartitionsRDD[243] at distinct at <console>:65\n"}]},"apps":[],"jobName":"paragraph_1586917553004_-1430022334","id":"20190922-193954_207087197","dateCreated":"2020-04-15T02:25:53+0000","dateStarted":"2020-04-17T18:40:41+0000","dateFinished":"2020-04-17T18:40:57+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:15187"},{"text":"printMsg(\"RDD Join: #3\")\nprintMsg(\"Extract all unique (customerId, name, country) triplets\")\nval triplets = joinCustomersInfo.map(row => {\n    val id = row._1\n    val customer = row._2._1\n    val item = row._2._2.getOrElse(Item(\"\", \"\", None, 0, \"\", 0.0, Some(id), \"N/A\"))\n    (id, customer.name, item.Country)\n})\n\ntriplets.takeSample(false, 5).foreach(println)\n","user":"anonymous","dateUpdated":"2020-04-17T18:49:39+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"---------RDD Join: #3---------\n---------Extract all unique (customerId, name, country) triplets---------\n(18109,Hector L. Watson,United Kingdom)\n(17966,Kirby G. Newton,United Kingdom)\n(12762,Ivor N. Hunter,Portugal)\n(14277,Eve R. Weiss,France)\n(13969,Beau G. Pruitt,United Kingdom)\ntriplets: org.apache.spark.rdd.RDD[(Int, String, String)] = MapPartitionsRDD[245] at map at <console>:53\n"}]},"apps":[],"jobName":"paragraph_1587093596301_-246588312","id":"20200417-031956_478137348","dateCreated":"2020-04-17T03:19:56+0000","dateStarted":"2020-04-17T18:49:39+0000","dateFinished":"2020-04-17T18:49:54+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:15188"},{"user":"anonymous","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1587149050238_-1428946909","id":"20200417-184410_610831708","dateCreated":"2020-04-17T18:44:10+0000","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:15189"}],"name":"1-SparkRDD_Aayushi","id":"2F8M5EQ2Z","noteParams":{},"noteForms":{},"angularObjects":{"md:shared_process":[],"spark:shared_process":[]},"config":{"isZeppelinNotebookCronEnable":false,"looknfeel":"default","personalizedMode":"false"},"info":{}}